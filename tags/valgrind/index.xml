<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Valgrind on 树深时间录</title><link>https://isshe.site/tags/valgrind/</link><description>Recent content in Valgrind on 树深时间录</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 21 May 2023 04:45:14 -0300</lastBuildDate><atom:link href="https://isshe.site/tags/valgrind/index.xml" rel="self" type="application/rss+xml"/><item><title>Valgrind 快速上手</title><link>https://isshe.site/p/valgrind-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</link><pubDate>Sun, 21 May 2023 04:45:14 -0300</pubDate><guid>https://isshe.site/p/valgrind-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</guid><description>Valgrind 快速上手 1、介绍 Valgrind 工具集提供了一系列调试和剖析工具，可以帮助我们写出更快更正确的程序。 其中最常用的工具是 Memcheck。可以检测很多 C 或 C++ 程序中导致奔溃或未知行为的内存错误。
2、准备程序 使用 -g 选项编译程序，使程序包含调试信息（debug info），这样可以让 Memcheck 的错误信息包含详细的行号。 如果可以允许程序变慢，使用 -O0 来编译最好；如果是 -O1 则行号可能有错，不过一般能正常工作，速度相对 -O0 也提升明显；-O2 或以上的优化级别则不建议使用，可能导致 Memcheck 报告未初始化值的错误。
使用 Valgrind 执行程序 如果程序正常是使用以下方式执行：
myprog arg1 arg 则，改为下面的方式：
valgrind --leak-check=yes myprog arg1 arg2 这个命令中没有指定 Memcheck，是因为 Memcheck 是默认的工具；--leak-check 选项打开详细的内存泄露检测器。 此时程序可能比平时慢很多（例如 20、30 倍），并且会使用多很多内存。Memcheck 将显示检测到的内存错误或内存泄露信息。
解释 Memcheck 的输出 // example.c #include &amp;lt;stdlib.h&amp;gt;void f(void) { int* x = malloc(10 * sizeof(int)); x[10] = 0; // problem 1: heap block overrun // problem 2: memory leak -- x not freed } int main(void) { f(); return 0; } 这是一个有内存泄露和内存错误的程序。</description></item></channel></rss>