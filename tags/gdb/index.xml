<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gdb on 树深时间录</title><link>https://isshe.site/tags/gdb/</link><description>Recent content in gdb on 树深时间录</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Mar 2024 20:58:12 +0800</lastBuildDate><atom:link href="https://isshe.site/tags/gdb/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 命令 —— gdb</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-gdb/</link><pubDate>Sun, 24 Mar 2024 20:58:12 +0800</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-gdb/</guid><description>gdb gdb - GNU 调试器。
调试器 (如 GDB) 的目的是允许你查看其他程序在执行时的&amp;quot;内部&amp;quot;的内容，或者程序奔溃的时候正在做什么。 GDB 可以做 4 种主要的事情来帮助你捕捉 bug：
启动你的程序，指定任何可能影响程序行为的内容。 使程序在指定条件下停止。 检查你程序停止时，正在发生的事情。 更改程序中的内容，以便你可以尝试纠正一个错误的影响并继续了解另一个错误。 你可以用 GDB 来调试 C、C++、Fortran、Modula-2 编写的程序。 使用gdb命令来调用 GDB。一旦启动，它会从中断读取命令，直到你用 GDB 命令&amp;quot;exit&amp;quot;告诉它退出。你可以用 GDB 命令help来查看帮助（不用退出 gdb）。 你可以运行没有参数或选项的 gdb ; 但是最常用的启动 GDB 的方法是使用一个或两个参数，将可执行程序指定为参数：
gdb program
您还可以从可执行程序和指定的 core 文件开始：
gdb program core
如果要调试正在运行的进程，则可以将进程 ID 指定为第二个参数：
gdb program 1234 gdb -p 1234
将 GDB 附加 (attach) 到 1234 进程（除非你由一个名字为 1234 的 core 文件，gdb 会先查找 core 文件）。 以下是一些常用的 GDB 命令：</description></item></channel></rss>