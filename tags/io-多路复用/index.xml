<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IO 多路复用 on 树深时间录</title><link>https://isshe.site/tags/io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link><description>Recent content in IO 多路复用 on 树深时间录</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Dec 2021 02:51:23 -0400</lastBuildDate><atom:link href="https://isshe.site/tags/io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>操作系统 —— IO 多路复用之 epoll</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-epoll/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-epoll/</guid><description>epoll I/O事件通知设施(I/O event notification facility)。
1. epoll_create #include &amp;lt;sys/epoll.h&amp;gt; int epoll_create(int size); int epoll_create1(int flags); 作用：打开一个epoll文件描述符。 参数： size： Linux 2.6.8后不再使用，但是必须大于0。 flags： 0：和epoll_create行为一样。 O_CLOEXEC: 进程退出时关闭文件描述符。 返回： 失败：-1，设置errno；否则： 返回一个指向一个新epoll实例的文件描述符；当不再使用此描述符时，应使用close关闭。 当所有指向此epoll实例的描述符都被关闭时，内核会释放相关资源。 2. epoll_ctl typedef union epoll_data { void *ptr; int fd; uint32_t u32; uint64_t u64; } epoll_data_t; struct epoll_event { uint32_t events; /* Epoll events */ epoll_data_t data; /* User data variable */ }; int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); 作用：epoll文件描述符的控制接口。 参数： epfd: epoll fd，epoll文件描述符； op: EPOLL_CTL_ADD：注册fd到epfd； EPOLL_CTL_MOD：修改与fd的关联evnet事件。 EPOLL_CTL_DEL：从epfd中删除fd； fd: 要操作(op)的fd； event: 与fd关联的事件。EPOLL_CTL_DEL时这个参数被忽略，也可以直接为NULL； 返回： 正常：0； 异常：-1，设置errno； 数据结构说明； struct epoll_event的events的是位掩码的形式，取值是： EPOLLIN: 相关文件可读。(read) EPOLLOUT: 相关文件可写。(write) EPOLLRDHUP: 流套接字对端关闭连接，或关闭写入一半的连接。(在使用边沿触发时，此标志对于编写简单代码以检测对端关闭特别有用。) EPOLLPRI: 有紧急数据可读。 EPOLLERR: 相关文件描述符发生错误。（默认设置，不用手动设置） EPOLLHUP: 相关文件描述符被挂起。（默认设置，不用手动设置） EPOLLET: 相关文件描述符设置为边缘触发。（默认是水平触发） EPOLLONESHOT: 对相关描述符设置一次性行为。 epoll_wait一次后，不会再wait，除非使用EPOLL_CTL_MOD重新设置。 EPOLLWAKEUP: 设置此标记，使事件排队时系统保持唤醒。 当系统设置了自动休眠模式(/sys/power/autosleep)时，为了保持设备唤醒直到事件处理完成，必须使用此标记。 EPOLLEXCLUSIVE：为附加到目标文件描述符fd的epoll文件描述符设置独占唤醒模式。【？？？】 3.</description></item><item><title>操作系统 —— IO 多路复用之 poll</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-poll/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-poll/</guid><description>poll 相关函数 #include &amp;lt;poll.h&amp;gt; struct pollfd { int fd; /* file descriptor */ short events; /* events to look for */ short revents; /* events returned */ }; int poll(struct pollfd fds[], nfds_t nfds, int timeout); 作用：类似于select。（指示内核等待多个事件，并在有一个或多个时间或经历指定时间后唤醒进程。） 参数： fds[]: 指向一个结构数组第一个元素的指针。 nfds: 指定fds中的元素个数。 timeout: INFTIM： 永远等待；(INFTIM被定义为一个负值) 0：立即返回； &amp;gt; 0: 等待指定数据的毫秒数。 返回： 成功：就绪描述符数目 超时：0 出错：-1 数据结构说明： events: 要测试的条件； revents: 返回描述符的状态。 events/revents标记： 常值 说明 能作为evnets的输入吗？ 能作为revents的输入吗？ POLLIN 普通或优先级带数据可读 + + POLLRDNORM 普通数据可读 + + POLLRDBAND 优先级带数据可读 + + POLLPRI 高优先级数据可读 + + POLLOUT 普通数据可写 + + POLLWRNORM 普通数据可写 + + POLLWRBAND 优先级带数据可写 + + POLLERR 发生错误 + POLLHUP 发生挂起 + POLLNVAL 描述符不是一个打开的文件 + 数据分类 poll识别三类数据：普通(normal)、优先级带(priority band)、高优先级(high priority)</description></item><item><title>操作系统 —— IO 多路复用之 select</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-select/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-select/</guid><description>select select函数允许进程指示内核等待多个事件，并在有一个或多个时间或经历指定时间后唤醒进程。
1. select #include &amp;lt;sys/select.h&amp;gt; int select(int nfds, fd_set *restrict readfds, fd_set *restrict writefds, fd_set *restrict errorfds, struct timeval *restrict timeout); 作用：指示内核等待多个事件，并在有一个或多个时间或经历指定时间后唤醒进程。 参数： nfds: 待测试的最大描述符+1； readfds: 监听读的fd集合； writefds: 监听写得fd集合； errorfds: 监听异常的fd集合； timeout: 等待超时时间。 NULL: 永远等下去； 非NULL且不为值0: 等待指定时间； 非NULL且值为0: 不等待，检查描述符后立即返回。（轮询） 返回： 返回： 成功：就绪描述符数目 超时：0 出错：-1 2. 描述符就绪条件 读就绪： 该套接字接收缓冲区的数据字节数&amp;gt;=套接字缓冲区低水位标记的当前大小。 高于水位，认为可读。 该套接字的读半部关闭(接收了FIN的TCP连接)。 返回EOF 该套接字是一个监听套接字且已完成的连接数不为0。 此时accept通常不阻塞。 其上有一个套接字错误待处理。 读操作不阻塞、返回-1，并设置errno。 待处理错误，可通过getsockoptvidkSO_ERROR套接字获取并清除。 写就绪： 发送缓冲区的数据字节数&amp;gt;=套接字缓冲区低水位标记的当前大小。 该连接的写半部关闭。 此时写，会产生SIGPIPE信号。 使用非阻塞connect的套接字已建立连接，或者connect已经以失败告终。 其上有一个套接字错误待处理。 异常就绪：（？！） 套接字存在带外数据或者仍处于带外标记。 注意：当某个套接字上发生错误时，它将由select标记为可读又可写。 汇总： 条件 可读吗？ 可写吗？ 异常吗？ 有数据可读 + 关闭连接的读一半 + 给监听套接字准备好新连接 + 有可用于写得空间 + 关闭连接的写一半 + 待处理错误 + + TCP带外数据 + 3.</description></item></channel></rss>