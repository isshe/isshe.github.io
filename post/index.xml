<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 树深时间录</title><link>https://isshe.site/post/</link><description>Recent content in Posts on 树深时间录</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Dec 2021 02:22:19 -0400</lastBuildDate><atom:link href="https://isshe.site/post/index.xml" rel="self" type="application/rss+xml"/><item><title>个人感悟 —— 国家公祭日有感</title><link>https://isshe.site/p/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%82%9F-%E5%9B%BD%E5%AE%B6%E5%85%AC%E7%A5%AD%E6%97%A5%E6%9C%89%E6%84%9F/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%82%9F-%E5%9B%BD%E5%AE%B6%E5%85%AC%E7%A5%AD%E6%97%A5%E6%9C%89%E6%84%9F/</guid><description>2021 年国家公祭日有感 我是一个南方人，一直以来，都不太愿意去了解这些同胞受难的事情，不愿意面对；同时，也不知道该以什么样的心情去面对。
我不确定一个人、一个军队，在祖国强盛、自己满怀荣光的情况下，如何能够做出这样的事情。 一个人为之，或许可以称之为堕落；一个军队，大概是集体兽化了吧。
何为人？这个提问出自《一人之下》。
“张三”说：法律是道德的最低标准，我们不应该以不违法来标榜自己。 我也是这么认为的。 但是对于我个人来说，我希望我更有原则，更加旗帜鲜明：
旗帜鲜明地表达自己的立场——热爱自己、热爱家人、热爱祖国、热爱这片土地； 旗帜鲜明地反对屠杀之类禽兽行为； 牢记历史，热爱和平。</description></item><item><title>图解密码技术 —— 第14章-SSL-TLS</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC14%E7%AB%A0-ssl-tls/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC14%E7%AB%A0-ssl-tls/</guid><description>SSL/TLS为了更安全的通信
什么是SSL/TLS？ 是世界上应用最广泛的密码通信方法。 SSL: Secure Socket Layer. TLS: Transport Layer Security. 相当于SSL的后续版本。 由(下层)TLS记录协议(TLS record protocol)和(上层)TLS握手协议(TLS handshake protocol)这两层协议叠加而成。 TLS记录协议 TLS记录协议负责：消息的压缩、加密、数据的认证。
TLS握手协议 TLS握手协议：加密之外的其他各种操作。 握手协议 密码规格变更协议 警告协议 应用数据协议</description></item><item><title>图解密码技术 —— 第一章-环游密码世界</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%8E%AF%E6%B8%B8%E5%AF%86%E7%A0%81%E4%B8%96%E7%95%8C/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%8E%AF%E6%B8%B8%E5%AF%86%E7%A0%81%E4%B8%96%E7%95%8C/</guid><description>第一章 环游密码世界 名词 明文：加密前的消息。 密文：加密后的消息。 加密：把明文转换为密文的操作。 解密：把密文还原为明文的操作。 破译：接收者以外的人试图将密文还原为明文。 秘钥：加密解密的钥匙。 对称密码：加密、解密使用同一秘钥。 非对称密码：加密、解密使用不同秘钥。（也称为公钥密码） 混合密码系统：结合对称密码和公钥密码的加密方式。 单向散列函数(one-way hash function)：用于保证数据的完整性(integrity)。防篡改。 消息认证码(message authentication code)：用于确认消息是否来自期望的对象。防篡改、防伪装(认证)。 数字签名(digital signature): 防篡改、防伪装、防止否认。 伪随机数生成器(Pseudo Random Number Generator, PRNG): 一种模拟产生随机数的算法。
密码常识 不要使用保密的密码算法 使用低强度的密码比不进行任何加密更危险 任何密码总有一天都会被破解 密码只是信息安全的一部分</description></item><item><title>图解密码技术 —— 第七章-单向散列函数</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</guid><description>第七章 单向散列函数 单向散列函数(one-way hash function): 可以根据消息的内容，计算出散列值。
散列值可以被用于检查消息的完整性。 输入：消息(message)；输出：散列值(hash value)。 性质 抗碰撞性：collision resistance，难以发生碰撞。 单向性：one-way，无法通过散列值反算出消息的性质。
术语 单向散列函数：消息摘要函数、哈希函数、杂凑函数。 消息：原像。 散列值：消息摘要、指纹。 完整性：一致性。</description></item><item><title>图解密码技术 —— 第三章-对称密码</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/</guid><description>对称密码 用相同的秘钥进行加密和解密。
比特序列 编码：将现实中的东西映射为比特序列。 ASCII UTF-8 XOR——异或 XOR: exclusive or, 异或。
异或类似于加密解密过程： 消息A异或秘钥B = X X 异或 B = A 一次性密码本 原理：将明文与一串随机的比特序列进行XOR运算。 无法破解的原因：密文 XOR 破解秘钥得到的有意义明文，可能有多个，无法确定具体是哪个明文。
DES DES: Data Encryption Standard。
美国联邦信息处理标准中采用的一种对称密码。 一种将64bit明文加密成64bit密文的对称密码算法。 秘钥长度是56bit。（实际64bit，但由于每隔7bit设置一个错误检查bit，因此是56bit） 如果明文长于64bit，则需要迭代加密。 差分分析 思路：改变一部分明文并分析密文如何随之改变。
线性分析 思路：将明文和密文的一些对应比特进行XOR并计算其结果为0的概率。
三重DES 3DES(TDEA)：将DES重复3次。 分组长度为：64 * 3 = 192
AES 分组长度为：128</description></item><item><title>图解密码技术 —— 第九章-数字签名</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</guid><description>数字签名 公钥密码：存在加密秘钥(公钥)和解密秘钥（私钥）。用公钥加密。 数字签名：签名秘钥（私钥）和验证秘钥（公钥）。用私钥加密。 数字签名并不是为了保证机密性。
签名的生成和验证 签名秘钥：私钥。用于对消息进行签名——生成签名。只能一人持有。 验证秘钥：公钥。用于验证消息的签名——验证签名。可以多人持有。
对消息签名的过程 A用自己的私钥进行加密。 A将签名和消息发送给B。 B用A的公钥进行解密（签名验证）。 B将解密后的消息与A发过来的消息进行对比。一致，则验证成功，否则，验证失败。 对消息散列值签名的过程 公钥密码算法较慢，如果直接对消息进行签名，会比较耗时。
A用单向散列函数计算消息的散列值。 A用私钥对散列值进行加密。 A将消息和签名发送给B。 B用A的g公钥对收到的签名进行解密。 B将签名解密后得到的散列值与A发送的消息的散列值进行对比。一致，验证成功，否则，验证失败。 应用场景 信息公告 确保是目标组织发布的目标公告，法制被篡改。 软件下载 软件下载完成后，验证签名，防止软件遭到篡改。（并不能检测软件是否是恶意的） 公钥证书。 验证数字签名时，需要合法的公钥。对公钥进行签名得到的就是公钥证书。【第三方？？？】 SSL/TLS。 使用服务器证书验证服务器身份。 服务器证书：加上数字签名的服务器公钥。 总结 对称密码的秘钥是机密性的精华，单向散列函数的散列值是完整性的精华。</description></item><item><title>图解密码技术 —— 第二章-历史上的密码</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E5%AF%86%E7%A0%81/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E5%AF%86%E7%A0%81/</guid><description>第二章 历史上的密码 历史上著名的密码 凯撒密码 简单替换密码 Enigma 破译方法 暴力攻击 频率分析 凯撒密码 通过将明文中使用的字母表&amp;quot;平移&amp;quot;来进行加密。 秘钥空间：26 破解方式：直接暴力破解。
简单替换密码 更改26个字母的对应关系。如A表示X（A不再是A）。 秘钥空间：26 x 25 x 24 x &amp;hellip; x 1 = 403291461126605635584000000 破解方式：频率分析 Enigma 略</description></item><item><title>图解密码技术 —— 第五章-公钥密码</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</guid><description>第五章 公钥密码 秘钥配送问题 解决方法 事先共享秘钥 密钥分配中心 Diffie-Hellman密钥交换 公钥密码 RSA RSA是一种公钥密码算法。名字来源于三位作者的姓。
Ron Rivest、Adi Shamir、Leonard Adleman RSA加密 密文 = 明文 ^ E mode N 在RSA中，明文、密钥、密文都是数字。 密文等于明文的E次方对N取模） E = Encryption N = Number E和N的组合就是公钥。 RSA解密 明文 = 密文 ^ D mod N D = Decryption N = Number D和N的组合就是私钥。 求N N = p x q p和q是质数，由伪随机数生成器生成。 求L L = lcm(p - 1, q - 1) lcm：取最小公倍数 求E 1 &amp;lt; E &amp;lt; L gcd(E, L) = 1 gcd: 最大公约数 E和L最大公约数是1（互质） 求D 1 &amp;lt; D &amp;lt; L E x D mode L = 1 中间人攻击 攻击方式： A和B用公钥密码通讯。 中间人X对A冒充B，对B冒充A。 中间人攻击对所有公钥密码对是有效的。</description></item><item><title>图解密码技术 —— 第八章-消息认证码</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81/</guid><description>消息认证码-消息被正确传送了吗 消息认证码： Message Authentication Code，MAC。
是一种确认完整性并进行认证的技术。 是一种与秘钥相关联的单向散列函数。 输入：任意长度的消息 + 共享秘钥。 输出：固定长度的数据。 消息认证码使用的秘钥必须是密码学安全的、高强度的伪随机生成器。如果是人为选定，则会增加秘钥被推测的风险 消息验证码能与不能 不能保证消息的机密性； 不能防止否认； 能识别出篡改行为； 能对消息进行认证；（合法） 消息验证码的局限性 无法防止否认； 无法防止否认的本质是：相同的秘钥有多于1个人获得。</description></item><item><title>图解密码技术 —— 第六章-混合密码系统</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%B7%B7%E5%90%88%E5%AF%86%E7%A0%81%E7%B3%BB%E7%BB%9F/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%B7%B7%E5%90%88%E5%AF%86%E7%A0%81%E7%B3%BB%E7%BB%9F/</guid><description>第六章 混合密码系统 用对称密码提高速度，用公钥密码保护会话密钥。
对称密码：用于加密消息/数据。 公钥密码：用于加密密钥/会话密钥。 对称密码和公钥密码的密钥长度必须具备同等强度。 考虑长期运用时，公钥密码的强度应该要高于对称密码。 因为对称密码的会话密钥被破解，只会影响到本次通信，而公钥被破译，会影响过去到未来所有通信内容。 密钥强度对比：
对称密码AES 公钥密码RSA 128 3072 192 7680 256 15360 问题 对称密码： 密钥传送问题 公钥密码： 中间人攻击 速度慢 混合密码加密过程 混合密码加密过程
混合密码解密过程 混合密码解密过程</description></item><item><title>图解密码技术 —— 第十一章-秘钥</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0-%E7%A7%98%E9%92%A5/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0-%E7%A7%98%E9%92%A5/</guid><description>第11章 秘钥——秘密的精华 什么是秘钥？ 秘钥：一个巨大的数字。
数字本身的大小不重要，重要的是秘钥空间的大小。 秘钥与明文是等价的。
常见的秘钥？ DES秘钥：实质长度56bit(7bytes)。 DES-EDE2秘钥：实质长度112bit(14bytes)。 DES-EDE3秘钥：实质长度168bit(21bytes)。 AES秘钥：128/192/256bit 如何管理秘钥？ 需要清楚：信息的机密性不应该依赖于密码算法本身，而是应该依赖于妥善保管的秘钥。
生成秘钥： 用随机数生成秘钥； 密码学用途的伪随机数生成器必须是专门针对密码学用途而设计的。 用口令生成秘钥； 配送秘钥： 事先共享秘钥; 更新秘钥： 定期更新，例如每发送1000字节数据更新一次。 更新方式：将当前秘钥的散列值作为下一个秘钥。 这种防止破译过去的通信内容的机制，称为向后安全。
保存秘钥
对秘钥进行加密：有助于减少需要保管的秘钥数量。 作废秘钥
为什么要作废秘钥？ 不再需要的秘钥及时作废，防止被解密。 如何作废秘钥？ 彻底删除秘钥。 秘钥的分类？ 对称、非对称。 用于认证、用于机密性。 Diffie-Hellman秘钥交换 实际并没有交换秘钥，而是通过计算生成相同的秘钥，因此也称为Diffie-Hellman秘钥协商。 什么是基于口令的密码(password based Encryption, PBE)？ 根据口令生成秘钥，再用秘钥进行加密的方法。 KEK：通过口令生成的秘钥。 CEK：通过随机数生成器生成的秘钥。 什么是盐？盐的作用是什么？ 盐：伪随机数生成器生成的随机数，和口令一起通过单向散列函数生成秘钥(KEK)。 作用：用来防御字典攻击。 字典攻击：准备大量候选KEK，逐一进行尝试。 什么是拉伸？ 拉伸：讲单向散列函数进行多次迭代的方法。 通过拉伸可以改良PBE。 如何生成安全的口令？ 使用只有自己才能知道的信息。（大原则） 不要使用对自己重要的事物的名字。 不要使用关于自己的信息。 不要使用别人见过的信息。 将多个不同的口令分开使用。 有效利用笔记。 理解口令的局限性。 当对口令字符/长度进行限制时，秘钥的长度(bit)并不太长，可能可以通过暴力破解。 使用口令生成器和管理工具。</description></item><item><title>图解密码技术 —— 第十三章-PGP</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0-pgp/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0-pgp/</guid><description>PGP——密码技术的完美组合 什么是PGP？ PGP: Pretty Good Privacy. 是Philip Zimmermann编写的密码软件。 PGP有什么用？ 可以保护处于极端状况(如:性命攸关)下的人们的隐私。 什么是OpenGPG？ OpenGPG：对秘闻和数字签名进行定义的标准规范：RFC1991/RFC2440/RFC4880/RFC5581/RFC6637。 GUN遵照OpenGPG(RFC4880)规范编写了GnuPG自由软件。 什么是信任网？ PGP采用的确认公钥合法性的方法。 注意：公钥是否合法和所有者是否可信是两个不同的问题，因为尽管公钥合法，其所有者也可以是不可信的。</description></item><item><title>图解密码技术 —— 第十二章-随机数</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0-%E9%9A%8F%E6%9C%BA%E6%95%B0/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0-%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid><description>第12章 随机数——不可预测性的源泉 随机数的作用？使用场景是什么？ 生成秘钥：用于对称密码和消息认证码。 生成秘钥对：用于公钥密码和数字签名。 生成初始化向量(IV)：用于分组密码的CBC/CFB/OFB模式。 生成nonce：用于防御重放共计以及分组密码的CTR模式等。 生成盐：用于基于口令的密码等。 随机数的性质 随机性——不存在统计学偏差，是完全杂乱的数列。 不可预测性——不能从过去的数列推测下一个出现的数。 不可重现性——除非将数列本身保存下来，否则不能重现相同的数列。 以上3个性质，越往下越严格。 随机数强度 弱伪随机数：只有随机性。 强伪随机数：具有随机性+不可预测性。 真随机数：同时具备上面三个性质。</description></item><item><title>图解密码技术 —— 第十章-证书</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%8D%81%E7%AB%A0-%E8%AF%81%E4%B9%A6/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%8D%81%E7%AB%A0-%E8%AF%81%E4%B9%A6/</guid><description>证书——为公钥加上数字签名 这章不是太理解。
什么是证书？ 证书：记录个人信息及公钥，并由认证机构施加数字签名. 证书是公钥证书的简称。
证书的应用场景？ 什么是公钥基础设施？ 公钥基础设施(PKI, Public-key Infrastructure): 为了能更有效运用公钥而制定的一系列规范和规格的总称。
公钥基础设置（PKI）的组成要素是什么？ 用户：使用PKI的人。 认证机构：颁发证书的人。 仓库：保存证书的数据库。 为什么需要证书？</description></item><item><title>图解密码技术 —— 第四章-分组密码的模式</title><link>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%A8%A1%E5%BC%8F/</guid><description>第四章 分组密码的模式 DES和AES都属于分组密码，它们只能加密固定长度的明文。 如果需要加密任意长度的明文，则需进行迭代，而分组密码的迭代方法，就称为分组密码的模式。
分组密码与流密码 密码算法可以分为分组密码和流密码。 流密码：一次性密码本 分组密码：DES、AES、3DES等大多数堆成密码算法。
模式分类 ECB：Electronic CodeBook mode，电子密码本模式。 CBC：Cipher Block Chaining mode，密码分组链接模式。 CFB：Cipher FeedBack mode，密文反馈模式。 OFB：Output FeedBack mode，输出反馈模式。 CTR：CounTeR mode，计数器模式。 GCM：Galois/Counter Mode, 。 初始化向量 由于加密第一个分组时，不存在“前一个密文分组”，因此事先准备一个长度为一个分组的bit序列来代替。此序列称为初始化向量(Initialization Vector, IV)
初始化向量必须使用不可预测的随机数。 ECB模式 电子密码本模式：切割明文为多个分组，逐个加密。（容易有安全漏洞，不要使用）
加解密过程图示 加解密过程图示 CBC模式 密码分组链接模式：密文分组像链条一样互相连接在一起。（前一个密文分组用于后一个分组的加密）
特点 无法直接对中间分组进行加密。 一个密文分组损坏，解密时最多只有两个明文分组受影响。（在密文长度没变的情况下） 加解密过程图示 加解密过程图示 CFB模式 密文反馈模式：前一个密文分组被送到密码算法的输入端，用于生成下一个密文分组。
特点 依赖上一个密文分组。 加解密过程图示 加解密过程图示 OFB模式 输出反馈模式：加密算法的输出作为下一个分组加密算法的输入。</description></item><item><title>数据库 —— Postgresql 慢查询分析</title><link>https://isshe.site/p/%E6%95%B0%E6%8D%AE%E5%BA%93-postgresql-%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90/</link><pubDate>Sat, 25 Dec 2021 02:22:19 -0400</pubDate><guid>https://isshe.site/p/%E6%95%B0%E6%8D%AE%E5%BA%93-postgresql-%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90/</guid><description>Postgresql 慢查询语句记录与分析 1. 记录 postgresql 以 12 版本为例
我们需要先打开 postgresql 的慢查询日志，此为前置条件，先记录下我们时间较长的查询。
编辑配置文件：/var/postgres12/data/postgresql.conf #log_min_duration_statement = -1 # -1 is disabled, 0 logs all statements # and their durations, &amp;gt; 0 logs only # statements running at least this number # of milliseconds 修改 -1 为 200，表示大于等于 200 毫秒的操作将被记录到日志。
重载配置 /path/to/pg_ctl reload -D /path/to/pgdata 2. 获取慢查询语句 2.1 切 postgresql 超户 sudo su - postgres 2.2 获取慢查询语句 打开日志文件 less /path/to/pg_log/postgresql.</description></item><item><title>操作系统 —— 进线程同步之读写锁</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%AF%BB%E5%86%99%E9%94%81/</link><pubDate>Tue, 14 Dec 2021 03:14:49 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E8%AF%BB%E5%86%99%E9%94%81/</guid><description>读写锁 1. 什么是读写锁 互斥锁把试图进入临界区的(多余)线程都阻塞住，无论是读还是写。（不区分读写） 独占锁。 读写锁区分读和写，同时只能一个线程写(写时不能读)；允许同时多个线程读(读时没有写)。 读为共享锁，写为独占锁。 读比写更频繁的应用中，用读写锁更好。 2. 读写锁的分配规则 只要没有线程持有读写锁用于写，任意数目的线程可以持有该读写锁用于读。 仅当没有线程持有读写锁时(用于读或写)，才能分配读写锁用于写。 3. 相关函数 静态分配用PTHREAD_RWLOCK_INITIALIZER进行初始化。 #include &amp;lt;pthread.h&amp;gt; // 初始化、销毁 int pthread_rwlock_init(pthread_rwlock_t *lock, const pthread_rwlockattr_t *attr); int pthread_rwlock_destroy(pthread_rwlock_t *lock); // 加锁、解锁 int pthread_rwlock_rdlock(pthread_rwlock_t *lock); int pthread_rwlock_tryrdlock(pthread_rwlock_t *lock); int pthread_rwlock_wrlock(pthread_rwlock_t *lock); int pthread_rwlock_trywrlock(pthread_rwlock_t *lock); int pthread_rwlock_unlock(pthread_rwlock_t *lock); // 属性初始化、销毁 int pthread_rwlockattr_init(pthread_rwlockattr_t *attr); int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr); // 属性设置：设置进程间共享: PTHREAD_PROCESS_SHARED/PTHREAD_PROCESS_PRIVATE int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *attr, int *pshared); int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared);</description></item><item><title>Linux 内核 —— 中断</title><link>https://isshe.site/p/linux-%E5%86%85%E6%A0%B8-%E4%B8%AD%E6%96%AD/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%86%85%E6%A0%B8-%E4%B8%AD%E6%96%AD/</guid><description>中断 1. 硬件中断注册 #include &amp;lt;linux/interrupt.h&amp;gt; static inline int __must_check request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char *name, void *dev) 作用：申请一个中断线。 参数： irq: 中断线号 handler: 中断处理函数 flags: name: dev: 2. 硬件中断释放 #include &amp;lt;linux/interrupt.h&amp;gt; const void *free_irq(unsigned int irq, void *dev_id); 作用：释放一个中断线。如果没有其他设备注册该IRQ线，就关闭该IRQ。 参数： irq: 中断线号。 dev_id: 设备标识。 3. 中断类型 网络设备常见的中断事件类型：
接收一帧：最常见、标准的情况。 传输失败； DMA传输已成功完成； drivers/net/3c59x.c有相关范例。 设备有足够内存处理新传输； 4.</description></item><item><title>Linux 内核 —— 设备驱动</title><link>https://isshe.site/p/linux-%E5%86%85%E6%A0%B8-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%86%85%E6%A0%B8-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</guid><description>设备驱动 NIC可用之前，相关联的net_device数据结构必须先初始化，添加至内核网络设备数据库、配置并开启。 注册/注销/开启/关闭是四个不同的操作，不要混淆。 相关讨论，主要以网络设备为主。
设备注册 触发网络设备注册的情况：
加载NIC设备驱动程序：内建在内核，则引导期间初始化；模块形式，则在运行期间初始化。 例如，注册PCI设备驱动程序时，会导致pci_driver-&amp;gt;probe被调用。 插入可热插拔网络设备：内核通知其驱动程序，驱动程序注册该设备。 注册流程：以ethernet设备为例，流程都是一样，只是细节不同。 示例可见：drivers/net/ethernet/intel/e100.c
xxx_probe/module_init | |---&amp;gt;dev = alloc_etherdev(sizeof(driver_private_structure)) | | | +---&amp;gt; alloc_etherdev(sizeof_priv, &amp;#34;eth%d&amp;#34;, ether_setup) | | | |---&amp;gt; dev = kmalloc(sizeof(net_device)) + sizeof_prive + padding) | |---&amp;gt; ether_setup(dev) | |---&amp;gt; strcpy(dev-&amp;gt;name, &amp;#34;eth%d&amp;#34;) | +---&amp;gt; return(dev) | ... ... ... |---&amp;gt; netdev_boot_setup_check(dev) | ... ... ... +---&amp;gt; register_netdev(dev) | +---&amp;gt; register_netdevice(dev) 注销 触发网络设备注销的情况：
卸载NIC去而被驱动程序：模块形式的设备驱动程序被卸载，相关联的NIC都需要被注销。 例如，卸载PCI设备驱动程序时，会导致pci_driver-&amp;gt;remove被调用。 删除可热拔插网络设备。 注销流程： xxx_remove(_one)/module_exit | |---&amp;gt; unregister_netdev(dev) | | | +---&amp;gt; unregister_netdevice(dev) |---&amp;gt; .</description></item><item><title>Linux 命令 —— gdb</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-gdb/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-gdb/</guid><description>gdb gdb - GNU调试器。
调试器(如GDB)的目的是允许你查看其他程序在执行时的&amp;quot;内部&amp;quot;的内容，或者程序奔溃的时候正在做什么。 GDB可以做4种主要的事情来帮助你捕捉bug：
启动你的程序，指定任何可能影响程序行为的内容。 使程序在指定条件下停止。 检查你程序停止时，正在发生的事情。 更改程序中的内容，以便你可以尝试纠正一个错误的影响并继续了解另一个错误。 你可以用GDB来调试C、C++、Fortran、Modula-2编写的程序。 使用gdb命令来调用GDB。一旦启动，它会从中断读取命令，直到你用GDB命令&amp;quot;exit&amp;quot;告诉它退出。你可以用GDB命令help来查看帮助（不用退出gdb）。 你可以运行没有参数或选项的gdb ; 但是最常用的启动GDB的方法是使用一个或两个参数，将可执行程序指定为参数：
gdb program
您还可以从可执行程序和指定的core文件开始：
gdb program core
如果要调试正在运行的进程，则可以将进程ID指定为第二个参数：
gdb program 1234 gdb -p 1234
将GDB附加(attach)到1234进程（除非你由一个名字为1234的core文件，gdb会先查找core文件）。 以下是一些常用的GDB命令:
break [file:]function 在函数(文件)中设置断点。 缩写：b。 用法： b &amp;lt;行号&amp;gt;，如：b 8 b &amp;lt;函数名称&amp;gt;，如：b main b *&amp;lt;函数名称&amp;gt;，如：b *main（在函数名称前面加“*”符号表示将断点设置在“由编译器生成的prolog代码处”） b *&amp;lt;代码地址&amp;gt;，如：b *0x804835c。 d [breakpoint number] 删除断点 run [arglist] 开始你的程序（arglist是参数列表） 缩写：r bt 回溯(backtrace)：显示程序堆栈。 print expr 显示表达式expr的值。 缩写：p c 继续运行你的程序（在停止后，例如断电）。continue的缩写。 next 继续下一行(在停止后)；不进入函数的单步调试。 缩写：n edit [file:]function 查看程序当前停止的行。 list [file:]function 在当前停止的位置附近键入程序的文本。 step 继续下一行(在停止后)；进入函数的单步调试。 缩写：s i 显示各类信息。如：i r，显示寄存器的信息 help [name] 显示GDB命令name的信息，或有关使用GDB的一般信息。 quit 退出GDB。 缩写：q 有关GDB的完整详细信息，请参阅：A Guide to the GNU Source-Level Debugger</description></item><item><title>Linux 命令 —— git</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-git/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-git/</guid><description>git submodule 添加submodule： git submodule add &amp;lt;subproject URL&amp;gt; &amp;gt; git submodule add https://github.com/isshe/gitsubproject 查看subproject的commit： git diff --cached &amp;lt;subproject dir&amp;gt; &amp;gt; git diff --cached gitsubproject/ 查看subproject的.gitmodules： git diff --cached --submodule 自动clone每个submodule： git clone --recursive &amp;lt;your repository url&amp;gt; &amp;gt; git clone --recursive https://github.com/isshe/gitproject 拉取子模块： git submodule init git submodule update &amp;gt; 更常用的是：递归更新 git submodule update --init --recursive 子模块的后续更新：
git submodule update --remote 调整submodule的commit： git pull origin xxx 切submodule的分支： git config -f .gitmodules submodule.</description></item><item><title>Linux 命令 —— ip</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-ip/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-ip/</guid><description>ip 显示/操纵路由、设备、策略路由、隧道。
概要 ip [ OPTIONS ] OBJECT { COMMAND | help } ip [ -force ] -batch filename OBJECT := { link | address | addrlabel | route | rule | neigh | ntable | tunnel | tuntap | maddress | mroute | mrule | monitor | xfrm | netns | l2tp | tcp_metrics } OPTIONS := { -V[ersion] | -h[uman-readable] | -s[tatistics] | -r[esolve] | -f[amily] { inet | inet6 | ipx | dnet | link } | -o[neline] | -n[etns] name | -a[ll] | -c[olor] } OBJECT:</description></item><item><title>Linux 命令 —— modprobe</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-modprobe/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-modprobe/</guid><description>modprobe modprobe - 向Linux内核添加或从内核移除模块。
modprobe智能地从Linux内核添加或删除模块：
注意，模块名称中-和_没有区别（自动执行下划线转换）。 modprobe在模块目录/lib/modules/'uname -r'(符号冲突了，用'代替)中查找所有模块和其他文件。 除了/etc/modprobe.d目录是的可选配置文件。详见modprobe.d modprobe还将以&amp;lt;module&amp;gt;.&amp;lt;option&amp;gt;的形式使用内核命令行上指定的模块选项。 modprobe.blacklist=&amp;lt;module&amp;gt;的形式使用黑名单。 如果在modulename之后给出了任何参数，它们将被传递给内核。 除了配置文件中列出的选项。 用法 modprobe [-v] [-V] [-C config-file] [-n] [-i] [-q] [-b] [modulename] [module parameters...] modprobe [-r] [-v] [-n] [-i] [modulename...] modprobe [-c] modprobe [--dump-modversions] [filename] 选项 -a, --all 加载命令行中指定的所有模块。 -b, --use-blacklist 此选项使modprobe将配置文件（如果有）中的黑名单命令也应用于模块名称。 它通常由udev(7)使用。 -C, --config 此选项会覆盖缺省配置目录（/etc/modprobe.d） 此选项通过安装或删除命令传递给 MODPROBE_OPTIONS环境变量中 的其他modprobe命令。 -c, --showconfig 输出config目录中的有效配置并退出。 --dump-modversions 打印出模块所需的模块版本信息列表。 分发版通常使用此选项，以便使用模块版本控制deps(依赖？)打包Linux内核模块。 -d, --dirname 模块的根目录，默认是`/`。 --first-time 通常，如果告知插入已存在的模块或删除不存在的模块，modprobe将成功（并且不执行任何操作）。 这是简单脚本的理想选择; 然而，更复杂的脚本通常想知道modprobe是否真的做了一些事情： 这个选项使modprobe失败，因为它实际上没有做任何事情。 --force-vermagic 每个模块都包含一个包含重要信息的小字符串，例如内核和编译器版本。 如果模块无法加载并且内核抱怨`version magic`不匹配，则可以使用此选项将其删除(抱怨)。 当然，这个检查是为了保护你的，所以这个使用选项是危险的，除非你知道你在做什么。 这适用于插入的任何模块：命令行上的模块（或别名）以及它所依赖的任何模块。 --force-modversion 当使用CONFIG_MODVERSIONS集编译模块时，会创建模块使用（或由模块提供）的每个接口的版本的详细说明。 如果模块无法加载并且内核抱怨模块不同意某个接口的版本，则可以使用“--force-modversion”来完全删除版本信息。 当然，这项检查是为了保护您的，所以使用此选项是危险的，除非您知道自己在做什么。 这适用于插入的任何模块：命令行上的模块（或别名）以及它所依赖的任何模块。 -f, --force 尝试从模块中删除任何可能阻止加载的版本信息：这与使用--force-vermagic和--force-modversion相同。 当然，这些检查是为了您的保护，所以使用此选项是危险的，除非您知道自己在做什么。 这适用于插入的任何模块：命令行上的模块（或别名）以及它所依赖的任何模块。 -i, --ignore-install, --ignore-remove 此选项使modprobe忽略命令行中，指定的模块的配置文件（如果有）中的安装和删除命令（任何相关模块仍然受配置文件中为它们设置的命令的限制）。 当使用此选项时，无论是否仅使用--ignore-install或--ignore-remove中的一个或其他（而不是两个）更具体地进行请求，将忽略安装和删除命令。 详见modprobe.</description></item><item><title>Linux 命令 —— netstat</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-netstat/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-netstat/</guid><description>netstat 显示当前的连接情况。（UDP、TCP、UNIX、ICMP等） 显示路由表、网络接口列表、网络统计信息、多播信息、伪装连接等。
1. 介绍 1.1 用法 netstat [-vWeenNcCF] [&amp;lt;Af&amp;gt;] -r netstat {-V|--version|-h|--help} netstat [-vWnNcaeol] [&amp;lt;Socket&amp;gt; ...] netstat { [-vWeenNac] -i | [-cWnNe] -M | -s } 1.2 选项 -r, --route 显示路由表 -i, --interfaces 显示接口列表 -g, --groups 显示多播组成员 -s, --statistics 显示网络统计信息 -M, --masquerade display masqueraded connections【？？？】 -v, --verbose 详细 -W, --wide 不要截断IP地址 -n, --numeric 不要解析IP成域名（直接使用IP，不经过域名服务器） --numeric-hosts 不要解析主机名 --numeric-ports 不要解析端口名 --numeric-users 不要解析用户名 -N, --symbolic 解析硬件名 【？？？】 -e, --extend 显示更多信息 -p, --programs 显示进程ID和进程名 -c, --continuous 持续列出网络状态 -l, --listening 显示LISTENING状态的连接 -a, --all, --listening 显示所有连接(默认: 显示CONNECTED的连接) -o, --timers 显示计时器 【netstat -to】 -F, --fib 显示转发信息库（Forwarding Information Base），默认显示 -C, --cache 显示路由缓存(routing cache)而不是FIB -t, --tcp 显示TCP信息 -u, --udp 显示UDP信息 -w, --raw 实现raw信息 -x, --unix 显示unix信息 --ax25 显示AMPR AX.</description></item><item><title>Linux 命令 —— ssh</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-ssh/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-ssh/</guid><description>ssh 隧道 场景：家里内网机器 A 想要访问公司的内网机器 B。 条件：需要一个公网机器 C （假设IP是 1.1.1.1）。
打开公网机器的转发
在 B 上执行:
ssh -p 22 -NR 0.0.0.0:10443:0.0.0.0:443 root@1.1.1.1 # 前面部分 0.0.0.0:10443：C 的信息 # 后面部分 0.0.0.0:443：B 的信息 注意：此时链接会一直保持，终端不会返回。
在 A 上执行: ssh -p 22 -NL 0.0.0.0:10443:0.0.0.0:10443 root@1.1.1.1 # 前面部分 0.0.0.0:10443：A 的信息 # 后面部分 0.0.0.0:10443：C 的信息 注意：此时链接会一直保持，终端不会返回。
此时，在 A 上通过 localhost:10443 即可访问 B 的 443。
端口映射 此方法相比上面的更为简化，直接把内网端口映射到外网设备上，直接访问外网设备映射的端口即可。
修改公网设备的 ssh 配置 sudo vi /etc/ssh/sshd_config # 设置 GatewayPorts yes # 重启 ssh 服务 sudo systemctl restart sshd 进行端口映射 在内网机器上：</description></item><item><title>Linux 命令 —— strace</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-strace/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-strace/</guid><description>strace strace - 跟踪系统调用和信号。
在最简单的情况下，strace运行指定的命令直到它退出。 它拦截并记录由进程调用的系统调用和进程接收的信号。 每个系统调用的名称，其参数和返回值都打印在标准错误或使用-o选项指定的文件上。 strace是一种有用的诊断，指导和调试工具。 跟踪中的每一行都包含系统调用名称，后跟括号中的参数及其返回值。如：
open(&amp;#34;/dev/null&amp;#34;, O_RDONLY) = 3 系统调用错误，如：(返回 -1，并打印出错原因)
open(&amp;#34;/foo/bar&amp;#34;, O_RDONLY) = -1 ENOENT (No such file or directory) 信号，如：
sigsuspend([] &amp;lt;unfinished ...&amp;gt; --- SIGINT (Interrupt) --- +++ killed by SIGINT +++ 正在执行系统调用的同时，另一个线程/进程调用另一个系统调用，则strace将尝试保留这些事件的顺序并将正在进行的调用标记为未完成。 当调用返回时，它将被标记为已恢复：
[pid 28772] select(4, [3], NULL, NULL, NULL &amp;lt;unfinished ...&amp;gt; [pid 28779] clock_gettime(CLOCK_REALTIME, {1130322148, 939977000}) = 0 [pid 28772] &amp;lt;... select resumed&amp;gt; ) = 1 (in [3]) 系统调用被中断后重启，如：
read(0, 0x7ffff72cf5cf, 1) = ?</description></item><item><title>Linux 命令 —— tcpdump</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-tcpdump/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-tcpdump/</guid><description>tcpdump tcpdump - dump traffic on a network（转储网络上的流量）。
用法 tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ] [ -c count ] [ -C file_size ] [ -G rotate_seconds ] [ -F file ] [ -i interface ] [ -j tstamp_type ] [ -m module ] [ -M secret ] [ --number ] [ -Q in|out|inout ] [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ] [ -W filecount ] [ -E spi@ipaddr algo:secret,.</description></item><item><title>Linux 命令 —— vmstat</title><link>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-vmstat/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/linux-%E5%91%BD%E4%BB%A4-vmstat/</guid><description>vmstat 报告虚拟内存统计信息：进程，内存，分页，块IO，陷阱(traps)、磁盘和cpu活动。
用法 vmstat [options] [delay [count]] vmstat [-f] [-s] [-m] vmstat [-S unit] vmstat [-d] vmstat [-p disk partition] vmstat [-V] 选项 delay 更新之间的延迟，以秒为单位。如果未指定延迟，则仅打印一个报告：自引导以来的平均值。 count 更新次数。如果未指定计数且指定了延迟(delay)，则count默认为无穷大。 -a, --active 显示活动和非活动内存（2.5.41及之后的版本） -f, --forks 显示自引导以来的fork数。 这包括fork，vfork和clone系统调用，并且是相当于创建的任务总数。 每个进程由一个或多个任务表示，具体取决于线程用法。此显示不重复（也就是只显示一次）。 -m, --slabs 显示slabinfo。【相关字段含义见下面部分】 -n, --one-header 标题仅显示一次而不是定期显示。 -s, --stats 显示各种事件计数器和内存统计信息。此显示不重复（也就是只显示一次）。 -d, --disk 报告磁盘信息（2.5.70及之后版本） -D, --disk-sum 报告一些有关磁盘活动的摘要统计信息。 -p, --partition device 分区的详细统计信息。 (2.5.70及之后版本). -S, --unit character 更换输出的单位：1000(k)，1024(K)，1000000(m)，1048576(M) 字节。 注意，这不会改变交换(si/so)或块(bi/bo)字段。 -t, --timestamp 为每一行附加时间戳。 -w, --wide 宽屏输出模式（对于具有较高内存量的系统非常有用，其中默认输出模式会受到不必要的列断裂影响）。 输出宽度会超过每行80个字符。 -V, --version 显示版本信息并退出。 -h, --help 显示帮助信息并退出。 字段描述 VM 模式字段描述 进程 r: 可运行进程的数量 (正在运行+就绪状态)。 b: 处于不可中断睡眠的进程数量。 内存 swpd: 使用的虚拟内存量。 free: 空闲内存量。(idle) buff: 用作缓冲区(buffer)的内存量。 cache: 用作缓存(cache)的内存量。 inact: 非活动内存量。（-a选项） active: 活动内存量。（-a选项） 交换内存 si: 从磁盘交换的内存量（/s）。 so: 交换到磁盘的内存量（/s）。 IO bi: 从块设备接收的块数（blocks/s）。 bo: 发送到块设备的块数（blocks/ s）。 系统 in: 每秒的中断数，包括时钟。 cs: 每秒上下文切换次数。 CPU 这些是总CPU时间的占比。 us: 运行非内核代码所花费的时间。 (用户时间, 包括nice时间) sy: 运行内核代码所花费的时间。 (系统时间) id: 空闲时间。在2.</description></item><item><title>操作系统 —— IO 多路复用之 epoll</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-epoll/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-epoll/</guid><description>epoll I/O事件通知设施(I/O event notification facility)。
1. epoll_create #include &amp;lt;sys/epoll.h&amp;gt; int epoll_create(int size); int epoll_create1(int flags); 作用：打开一个epoll文件描述符。 参数： size： Linux 2.6.8后不再使用，但是必须大于0。 flags： 0：和epoll_create行为一样。 O_CLOEXEC: 进程退出时关闭文件描述符。 返回： 失败：-1，设置errno；否则： 返回一个指向一个新epoll实例的文件描述符；当不再使用此描述符时，应使用close关闭。 当所有指向此epoll实例的描述符都被关闭时，内核会释放相关资源。 2. epoll_ctl typedef union epoll_data { void *ptr; int fd; uint32_t u32; uint64_t u64; } epoll_data_t; struct epoll_event { uint32_t events; /* Epoll events */ epoll_data_t data; /* User data variable */ }; int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); 作用：epoll文件描述符的控制接口。 参数： epfd: epoll fd，epoll文件描述符； op: EPOLL_CTL_ADD：注册fd到epfd； EPOLL_CTL_MOD：修改与fd的关联evnet事件。 EPOLL_CTL_DEL：从epfd中删除fd； fd: 要操作(op)的fd； event: 与fd关联的事件。EPOLL_CTL_DEL时这个参数被忽略，也可以直接为NULL； 返回： 正常：0； 异常：-1，设置errno； 数据结构说明； struct epoll_event的events的是位掩码的形式，取值是： EPOLLIN: 相关文件可读。(read) EPOLLOUT: 相关文件可写。(write) EPOLLRDHUP: 流套接字对端关闭连接，或关闭写入一半的连接。(在使用边沿触发时，此标志对于编写简单代码以检测对端关闭特别有用。) EPOLLPRI: 有紧急数据可读。 EPOLLERR: 相关文件描述符发生错误。（默认设置，不用手动设置） EPOLLHUP: 相关文件描述符被挂起。（默认设置，不用手动设置） EPOLLET: 相关文件描述符设置为边缘触发。（默认是水平触发） EPOLLONESHOT: 对相关描述符设置一次性行为。 epoll_wait一次后，不会再wait，除非使用EPOLL_CTL_MOD重新设置。 EPOLLWAKEUP: 设置此标记，使事件排队时系统保持唤醒。 当系统设置了自动休眠模式(/sys/power/autosleep)时，为了保持设备唤醒直到事件处理完成，必须使用此标记。 EPOLLEXCLUSIVE：为附加到目标文件描述符fd的epoll文件描述符设置独占唤醒模式。【？？？】 3.</description></item><item><title>操作系统 —— IO 多路复用之 poll</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-poll/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-poll/</guid><description>poll 相关函数 #include &amp;lt;poll.h&amp;gt; struct pollfd { int fd; /* file descriptor */ short events; /* events to look for */ short revents; /* events returned */ }; int poll(struct pollfd fds[], nfds_t nfds, int timeout); 作用：类似于select。（指示内核等待多个事件，并在有一个或多个时间或经历指定时间后唤醒进程。） 参数： fds[]: 指向一个结构数组第一个元素的指针。 nfds: 指定fds中的元素个数。 timeout: INFTIM： 永远等待；(INFTIM被定义为一个负值) 0：立即返回； &amp;gt; 0: 等待指定数据的毫秒数。 返回： 成功：就绪描述符数目 超时：0 出错：-1 数据结构说明： events: 要测试的条件； revents: 返回描述符的状态。 events/revents标记： 常值 说明 能作为evnets的输入吗？ 能作为revents的输入吗？ POLLIN 普通或优先级带数据可读 + + POLLRDNORM 普通数据可读 + + POLLRDBAND 优先级带数据可读 + + POLLPRI 高优先级数据可读 + + POLLOUT 普通数据可写 + + POLLWRNORM 普通数据可写 + + POLLWRBAND 优先级带数据可写 + + POLLERR 发生错误 + POLLHUP 发生挂起 + POLLNVAL 描述符不是一个打开的文件 + 数据分类 poll识别三类数据：普通(normal)、优先级带(priority band)、高优先级(high priority)</description></item><item><title>操作系统 —— IO 多路复用之 select</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-select/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8B-select/</guid><description>select select函数允许进程指示内核等待多个事件，并在有一个或多个时间或经历指定时间后唤醒进程。
1. select #include &amp;lt;sys/select.h&amp;gt; int select(int nfds, fd_set *restrict readfds, fd_set *restrict writefds, fd_set *restrict errorfds, struct timeval *restrict timeout); 作用：指示内核等待多个事件，并在有一个或多个时间或经历指定时间后唤醒进程。 参数： nfds: 待测试的最大描述符+1； readfds: 监听读的fd集合； writefds: 监听写得fd集合； errorfds: 监听异常的fd集合； timeout: 等待超时时间。 NULL: 永远等下去； 非NULL且不为值0: 等待指定时间； 非NULL且值为0: 不等待，检查描述符后立即返回。（轮询） 返回： 返回： 成功：就绪描述符数目 超时：0 出错：-1 2. 描述符就绪条件 读就绪： 该套接字接收缓冲区的数据字节数&amp;gt;=套接字缓冲区低水位标记的当前大小。 高于水位，认为可读。 该套接字的读半部关闭(接收了FIN的TCP连接)。 返回EOF 该套接字是一个监听套接字且已完成的连接数不为0。 此时accept通常不阻塞。 其上有一个套接字错误待处理。 读操作不阻塞、返回-1，并设置errno。 待处理错误，可通过getsockoptvidkSO_ERROR套接字获取并清除。 写就绪： 发送缓冲区的数据字节数&amp;gt;=套接字缓冲区低水位标记的当前大小。 该连接的写半部关闭。 此时写，会产生SIGPIPE信号。 使用非阻塞connect的套接字已建立连接，或者connect已经以失败告终。 其上有一个套接字错误待处理。 异常就绪：（？！） 套接字存在带外数据或者仍处于带外标记。 注意：当某个套接字上发生错误时，它将由select标记为可读又可写。 汇总： 条件 可读吗？ 可写吗？ 异常吗？ 有数据可读 + 关闭连接的读一半 + 给监听套接字准备好新连接 + 有可用于写得空间 + 关闭连接的写一半 + 待处理错误 + + TCP带外数据 + 3.</description></item><item><title>操作系统 —— 信号</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BF%A1%E5%8F%B7/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BF%A1%E5%8F%B7/</guid><description>信号 一个信号就是一条小消息，它通知进程系统中发生了一个某种类型的事件。 每种信号类型都对应于某种系统事件。 信号的默认行为： 1.信号发送和信号接收 待处理信号：一个发出而没有被接收的信号。 内核通过更新目的进程上下文的某个状态，发送一个信号给目的进程。 当目的进程被内核强迫以某种方式对信号的发送做出反应时，目的进程就接收了信号。 Unix系统提供了大量向进程发送信号的机制，所有这些机制都是基于进程组(process group)的。 相关函数: #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;signal.h&amp;gt;#include &amp;lt;unistd.h&amp;gt; // 发送sig指定信号到pid进程 int kill(pid_t pid, int sig); // 向自己发送SIGALRM信号 unsigned int alarm(unsigned int secs); typedef void (*sighandler_t)(int); sighandler_t signal(int signum, sighandler_t handler); 2.信号处理问题 待处理信号被阻塞。
例如：一个进程捕获一个信号SIGINT然后去处理程序处理信号，此时又来一个SIGINT信号，此信号会被阻塞。[疑问][1] （第2个信号不是SIGINT信号，那是否也还是阻塞？） 待处理信号不会排队等待。
任意类型至多只有一个待处理信号。[疑问][2] （不同类型的信号就可以有多个吗？） 系统调用可以被中断。
如read、wait、accept这样的慢速系统调用被信号打断，但是信号处理函数返回后不再继续被打断的系统调用，而是立即返回错误，errno为EINTR。 详见ex_SIGCHLD.c
教训：不可以用信号来对其他进程中发生的时间计数
3.</description></item><item><title>操作系统 —— 线程</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%BA%BF%E7%A8%8B/</guid><description>线程 当一个程序由exec启动执行时，系统将创建一个称为初始线程(initail thread)或主线程(main thread)的单个线程。 线程取消在8.5章，被取消的线程要释放相关资源（锁等），需要注意。 线程创建可能比进程创建快10~100倍； 线程或者是可汇合的(joinable)或者是脱离/分离的(detached)。（默认可汇合的） 可汇合的线程可以被其他线程回收其资源和杀死。 当可汇合的线程终止时，其线程ID和退出状态将保留，直到另一个线程调用pthread_join; 脱离的线程则像守护进程：终止时，所有资源都释放，因此不能等待它终止； 线程是运行在进程上下文中的逻辑流。 1. 共享及私有 线程共享的内容：
进程指令； 大多数数据； 打开的文件（如描述符）； 信号处理程序和信号处置； 当前工作目录； 用户ID和组ID； 线程私有的内容： 线程ID； 寄存器集合（包括程序计数器和栈指针）； 栈； 栈指针； 程序计数器； errno； 信号掩码； 优先级； 2. 相关函数 2.1 pthread_create #include &amp;lt;pthread.h&amp;gt; int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg); 作用：创建线程 参数： tid：线程ID；这是结果参数； attr: 线程属性，如优先级、初始栈大小、是否是一个守护线程等；通常采用默认值； start_routine: 创建的线程所需要执行的函数；称为线程启动函数(thread start function); arg: 参数；如果有多个，则打包成一个结构即可； 返回： 成功：0 失败：Exxx值 2.</description></item><item><title>操作系统 —— 进程</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B/</guid><description>进程 进程是操作系统中最核心的概念。
定义：一个执行中的程序的实例。（对正在运行程序的一个抽象） 是资源分配的基本单位。 进程提供给应用程序的关键抽象： 一个独立的逻辑控制流，它提供一个假象，好像程序独占地使用处理器。 一个私有的地址空间，它提供一个假象，好像程序独占地使用存储器系统。 逻辑流(逻辑控制流）：程序计数器PC值的序列。 异常处理程序、进程、信号处理程序、线程和Java进程都是逻辑流的例子。 并发流(concurrent flow)：一个逻辑流的执行在时间上与另一个流重叠。 并发：多条流并发地执行的一般现象称为并发(concurrecy)。 多任务(multitasking)：一个进程和其他进程轮流运行的概念称为多任务。 时间片(time slice)：一个进程执行它的控制流的一部分的每一时间段。 并行流(parallel flow)：两个流运行在不同的处理器上或者不同的计算机上。 上下文(context)：内核重新启动一个被抢占的进程所需要的状态。 上下文切换：内核为每个进程维护一个上下文(context)，多任务的实现依赖上下文切换。 1）保存当前进程的上下文； 2）恢复某个先前被抢占的进程被保存的上下文； 3）将控制传递给这个新恢复的进程； 1.进程地址空间 1.1 典型进程地址空间1 典型进程地址空间1
代码段起始地址： 32位：0x08048000 64位：0x00400000 进程从用户模式变为内核模式的方法是：中断、故障、陷入系统调用。 1.2 典型进程地址空间2 典型进程地址空间2
2. 进程状态 2.1 状态转换图 状态转换图 2.2 基本状态 1）运行态：进程实际占用CPU； 2）就绪态：可运行； 3）阻塞态：除非某种外部事件发生(使进程满足运行条件)，否则进程不能运行。 2.3 引入的状态： 创建状态； 终止状态； 挂起状态；（图中没有） 3.</description></item><item><title>操作系统 —— 进程间通信之 Posix 信号量</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-posix-%E4%BF%A1%E5%8F%B7%E9%87%8F/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-posix-%E4%BF%A1%E5%8F%B7%E9%87%8F/</guid><description>Posix信号量 信号量是一种提供不同进程间或一个进程的不同线程间同步手段的原语。 Posix提供两类信号量：
有名(named)信号量 基于内存(memory-base)的信号量。【macOS不支持】 Posix信号量的函数调用 Posix有名信号量至少具有岁内核的持续性。 Posix信号量是计数信号量。 1.相关函数 #include &amp;lt;fcntl.h&amp;gt; /* For O_* constants */#include &amp;lt;sys/stat.h&amp;gt; /* For mode constants */#include &amp;lt;semaphore.h&amp;gt; // 打开 sem_t *sem_open(const char *name, int oflag); sem_t *sem_open(const char *name, int oflag, mode_t mode, unsigned int value); // 关闭 int sem_close(sem_t *sem); // 删除 int sem_unlink(const char *name); // &amp;#34;加锁&amp;#34;——测试指定信号量的值，如果大于0，将它-1 int sem_wait(sem_t *sem); int sem_trywait(sem_t *sem); int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout); // “解锁”——信号量+1 int sem_post(sem_t *sem); // 获取信号量的值(macOS不支持) int sem_getvalue(sem_t *sem, int *sval); // 基于内存的信号量(macOS不支持) int sem_init(sem_t *sem, int shared, unsigned int value); int sem_destroy(sem_t *sem); A.</description></item><item><title>操作系统 —— 进程间通信之 Posix 共享内存</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-posix-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-posix-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid><description>Posix共享内存区 Posix.1提供了两种无亲缘关系进程间共享内存区的方法：（都需要调用mmap）
内存映射文件(memory-mapped file)：由open函数打开，由mmap函数把得到的描述符映射到当前进程地址空间中的一个文件。 共享内存区对象(share-memory object)：由shm_open打开一个Posix.1 IPC名字，所返回的描述符由mmap函数映射到当前进程的地址空间。 1. 相关函数 #include &amp;lt;sys/mman.h&amp;gt;#include &amp;lt;fcntl.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;#include &amp;lt;unistd.h&amp;gt; // 只是打开一个内存区对象，返回fd // oflag: 必须函数O_RDONLY、O_RDWR中的一个。 // mode: // * 指定权限为，在指定了O_CREAT的前提下使用。 // * 与mq_open和sem_open不同，shm_open的mode参数必须指定。 int shm_open(const char *name, int oflag, ...); // 删除一个共享内存区对象的名字。（删除一个名字不会影响低层支撑对象的现有引用。） int shm_unlink(const char *name); // 裁剪普通文件或者共享内存区对象 int ftruncate(int fd, off_t length); //获取打开的共享内存对象的信息 int fstat(int fildes, struct stat *buf); 2. 示例 共享计数器持续+1 示例6_1 示例6_2 向服务器发送消息 A.</description></item><item><title>操作系统 —— 进程间通信之 Posix 消息队列</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-posix-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-posix-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid><description>Posix 信息队列 消息队列可认为是一个消息链表。具有随内核的持续性 有读权限的线程可以从队列中取走信息； 有写权限的线程可以从队列中放置信息； 允许异步事件通知。 1. 相关函数 #include &amp;lt;mqueue.h&amp;gt;// 打开消息队列 mqd_t mq_open(const char *name, int oflag, ... /* mode_t mode, struct mq_attr *attr */); // 关闭消息队列，调用进程不用，但不会被删除消息队列 int mq_close(mqd_t mqdes); // 从系统中删除消息队列 // mq_unlink(const char *name); // int mq_notify(mqd_t mqdes, const struct sigevent *notification); A. Posix消息队列和SystemV消息队列的区别 Posix消息队列的读总是返回最高优先级的最早消息；System V消息队列的读可以返回任意指定优先级的消息。 往空队列放置一个消息时，Posix消息队列允许产生一个信号或者启动一个线程。System V没有类似的机制。</description></item><item><title>操作系统 —— 进程间通信之 SystemV 信号量</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-systemv-%E4%BF%A1%E5%8F%B7%E9%87%8F/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-systemv-%E4%BF%A1%E5%8F%B7%E9%87%8F/</guid><description>System V 信号量 1. 概述 二值信号量(binary semaphore): 其值为0或1的信号量； 计数信号量(counting semaphore): 其值为0~某个限制值之间的信号量； 以上两种信号量，等待(waiting)操作都等待信号量的值变为大于0； 计数信号量集(set of counting semaphores): 一个或多个信号量(构成一个集合), 其中的每个都是计数信号量。 System V信号量通过此概念给信号量增加了一级复杂度。 当讨论System V信号量时，都是指计数信号量集；当讨论Posix信号量时，都是指计数信号量。
约定： semval: 信号量当前值 semncnt: 等待semval变为大于其当前值的线程数； semzcnt: 等待semval变为0的线程数； semadj: 所指定信号量针对调用进程的调整值；【？？？】 2.信号量集相关数据结构 信号量集结构图
struct semid_ds { struct ipc_perm sem_perm; // 操作权限 struct sem *sem_base; // 指向信号量集数组的指针 ushort sem_nsems; // 信号量集中信号量的数量 time_t sem_otime; // 最后semop()的时间 time_t sem_ctime; // 最后创建或IPC_SET的时间 } struct sem { ushort_t semval; // 信号量值 short sempid; // 最后成功semop()/SETVAL, SETALL的PID ushort_t semncnt; // awaiting semval &amp;gt; current vale的数量 ushort_t semzcnt; // awaiting semval = 0 的数量 } // 给信号量集中某个特定的信号量指定一个操作 // 不能静态初始化，顺序根据实现不同而不同 struct sembuf { short sem_num; // 信号量号：0, 1, .</description></item><item><title>操作系统 —— 进程间通信之 SystemV 共享内存</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-systemv-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-systemv-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid><description>System V 共享内存区 1. 概述 System V 共享内存区在概念上类似于Posix共享内存区； Posix共享内存区：先调用shm_open，后调用mmap; System V 共享内存区：先调用shmget, 后调用shmat; 2. shmget函数 #include &amp;lt;sys/shm.h&amp;gt; int shmget(key_t key, size_t size, int shmflg); 作用：创建一个新的共享内存区或者访问一个已存在的共享内存区。 参数： key: ftok的返回值或者IPC_PRIVATE。 如果key=IPC_PRIVATE并且shmflg指定IPC_CREAT标记，则创建共享内存区。 如果没有key对应的共享内存标识符并且指定IPC_CREAT，则创建共享内存区。 创建内存区会初始化内存区为0。（size字节） 创建共享内存区会分配shmid_ds结构 struct shmid_ds { struct ipc_perm shm_perm; /* operation permissions */ int shm_segsz; /* size of segment in bytes */ pid_t shm_lpid; /* pid of last shm op */ pid_t shm_cpid; /* pid of creator */ short shm_nattch; /* # of current attaches */ time_t shm_atime; /* last shmat() time*/ time_t shm_dtime; /* last shmdt() time */ time_t shm_ctime; /* last change by shmctl() */ void *shm_internal; /* sysv stupidity */ }; size: 大小 shmflg： 标记 返回：共享内存区标识符(整数) 3.</description></item><item><title>操作系统 —— 进程间通信之 SystemV 消息队列</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-systemv-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B-systemv-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid><description>消息队列 在新的应用程序中，不应再使用消息队列。【分布式系统里面，好像很常用！需要时再了解！】 详见此Readme 2.4节 若需要客户进程和服务器进程之间的双向数据流，用UNIX域套接字或全双工管道。 队列：消息队列。信息的链接表，存储在内核中，由标识符标识。 队列ID：消息队列标识符。 与队列关联的数据结构：定义队列的当前状态 struct msqid_ds { struct ipc_perm msg_perm; msgqnum_t msg_qnum; // 队列里的消息长度/数量 msglen_t msg_qbytes; // 队列中能容纳的最大字节数 pid_t msg_lspid; // 最后msgsnd()的pid pid_t msg_lrpid; // 最后msgrcv()的pid time_t msg_stime; // 最后msgsnd()的时间 time_t msg_rtime; // 最后msgrcv()的时间 time_t msg_ctime; // 最后改变时间 } 1. 消息队列的系统限制 消息队列的系统限制
导出的：这种限制来源于其他限制。 如：Linux系统中，最大消息数受限于最大队列数，最大队列数受限于系统安装的RAM大小/数量。 2. 相关函数 key转换标识符的规则，见Readme 创建新队列、引用现有队列。 #include &amp;lt;sys/msg.</description></item><item><title>操作系统 —— 进程间通信之FIFO</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8Bfifo/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8Bfifo/</guid><description>FIFO FIFO有时被称为命名管道。 FIFO是一种文件类型。 支持在无亲缘进程间使用。 1. FIFO创建 创建FIFO类似于创建文件；FIFO的路径名存在于文件系统中。 2. 创建FIFO 相关函数 #include &amp;lt;sys/stat.h&amp;gt;int mkfifo(const char *path, mode_t mode); // 在fd表示的目录相关位置，创建一个FIFO。 // * path为绝对路径，则忽略fd // * path为相对路径，则fd参数是一个打开的目录的文件描述符。路径名和目录有关【？？？】 // * path为相对路径，并且fd参数有特殊值AT_FDCWD，则路径名以当前目录开始。 int mkfifoat(int fd, const char *path, mode_t mode); 3. 其他 open一个FIFO时，非阻塞标记(O_NONBLOCK)会产生的影响： 一般情况下(没有指定O_NONBLOCK)， 只读open要阻塞到其他进程为写打开此FIFO为止； 只写open要阻塞到其他进程为读打开此FIFO为止； 如果指定了O_NONBLOCK，则： 只读open时，立即返回。【返回啥？正常返回？】 只写open时，如果没有其他进程为读打开此FIFO，则此只写open返回-1，errno置为ENXIO。 若write一个没有进程为读打开的FIFO，则产生信号SIGPIPE。（类似pipe） 若FIFO的最后一个写进程关闭了该FIFO，则将为改FIFO的读进程产生一个文件结束标记。（类似于pipe） FIFO的两种用途： shell命令使用FIFO将数据从一条管道传送到另一条时，无需创建中间临时文件； 客户——服务器进程应用中，FIFO用作汇聚点，在客户和服务器进程间传递数据； 4.</description></item><item><title>操作系统 —— 进程间通信之共享内存</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid><description>Posix共享内存区 共享内存区是可用IPC形式中最快的。 一旦内存区映射到共享它的进程的地址空间，这些进程间的数据传递就不需要经过内核了；但是读写内存区时，需要进行同步。 非共享缓冲区读文件传给另一个进程写：4次内核与内核的交互 非共享缓冲区读文件传给另一个进程写 共享缓冲区读文件传给另一个进程写：2次内核与进程的交互 共享缓冲区读文件传给另一个进程写 1. 相关函数 1.1 mmap mmap: 把一个文件或一个Posix共享内存区对象映射到调用进程的地址空间。 使用此函数有3个目的： 使用普通文件以提供内存映射I/O； 使用特殊文件以提供匿名内存映射； 使用shm_open以提供无亲缘关系进程间的Posix共享内存区。 映射文件示意图： 映射文件示意图 #include &amp;lt;sys/mman.h&amp;gt; // addr: 指定fd映射到的进程内空间的起始地址； // len: 映射的长度——字节数； // offset: 从被映射文件开头起offset字节开始映射； // prot: 属性/模式(PROT_READ|PROT_WRITE|PROT_EXEC|PROT_NONE) // * PROT_NONE Pages may not be accessed. // * PROT_READ Pages may be read. // * PROT_WRITE Pages may be written. // * PROT_EXEC Pages may be executed.</description></item><item><title>操作系统 —— 进程间通信之管道</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%AE%A1%E9%81%93/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%AE%A1%E9%81%93/</guid><description>管道 管道的局限性 半双工：数据只能在一个方向上流动； 只能在具有共同祖先的两个进程间使用。 1. 管道创建 相关函数 #include &amp;lt;unistd.h&amp;gt; int pipe(int fd[2]); fd[0]为读而打开；
fd[1]为写而打开；
fd[1]的输出是fd[0]的输入；【？！】
PIPE_BUF规定内核的管道缓冲区的大小。
pathconf及fpathconf可以确定PIPE_BUF的值。 当管道的一端被关闭后，适用的规则：
当读(read)一个写端被关闭的管道，在所有数据被读取后，read返回0； 当写(write)一个读端被关闭的管道，则产生信号SIGPIPE。 忽略/捕捉信号并从信号处理程序返回后，write返回-1，errno=EPIPE。 A. 疑问 fd[1]的输出是fd[0]的输入？ fd[1]写端往管道写数据，即fd[1]的输出。 fd[0]读端从管道读数据，即fd[0]的输入。 详见示例：2_ex_pipe_copy_file_toless_or_more.c 多个进程使用相同的fd[2]的时候，管道的读写是怎么样的？ 管道是多个进程共用的，谁都可以写，也都可以读。因此写入/读取的信息可能混杂在一起。 详见示例：3_ex_read_and_write.c</description></item><item><title>操作系统 —— 进线程同步之互斥锁、条件变量</title><link>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E4%BA%92%E6%96%A5%E9%94%81%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</link><pubDate>Mon, 13 Dec 2021 02:51:23 -0400</pubDate><guid>https://isshe.site/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E4%BA%92%E6%96%A5%E9%94%81%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</guid><description>互斥锁与条件变量 互斥锁及条件变量是同步的基本组成部分。 互斥锁及条件变量出自Posix.1线程标准； 可以用来同步一个进程内的各个线程； 也可以用在进程间同步：互斥锁放在多个进程的共享内存区中。 1.互斥锁 互斥锁：相互排斥，是最基本的同步形式。 作用：保护临界区（critical region）。 保护的是数据：临界区中被操纵的数据；进程/线程共享的数据。 互斥锁是协作性锁，也就是锁无法防止一些进程/线程不先获取锁就访问数据。（需要靠自觉） 1.1 相关函数 静态分配使用PTHREAD_MUTEX_INITIALIZER进行初始化 #include &amp;lt;pthread.h&amp;gt; // 互斥锁初始化、销毁 int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr); int pthread_mutex_destroy(pthread_mutex_t *mutex); // 上锁、解锁 int pthread_mutex_lock(pthread_mutex_t *mptr); int pthread_mutex_trylock(pthread_mutex_t *mptr); int pthread_mutex_unlock(pthread_mutex_t *mptr); // 属性初始化、销毁 int pthread_mutexattr_init(pthread_mutexattr_t *attr); int pthread_mutexattr_destroy(pthread_mutexattr_t *attr) // 属性设置：进程间共享等（MACOS和LINUX相关函数有所不同） // 均返回：成功：0，失败：正的Exxx值 2. 条件变量 互斥锁用于上锁，条件变量用于等待。 每个条件变量总是与一个互斥锁相关联。 2.1 相关函数 静态分配使用PTHREAD_COND_INITIALIZER进行初始化 #include &amp;lt;pthread.</description></item><item><title>VLAN 介绍</title><link>https://isshe.site/p/vlan-%E4%BB%8B%E7%BB%8D/</link><pubDate>Sun, 12 Dec 2021 11:35:47 -0400</pubDate><guid>https://isshe.site/p/vlan-%E4%BB%8B%E7%BB%8D/</guid><description>VLAN VLAN - 虚拟局域网（Virtual Local Area Network）。 在IEEE 802.1Q中，给定以太网上的最大VLAN数为4094。（12位VID。减去头尾的0和4095）
作用 VLAN可以为网络提供以下作用： 广播控制 带宽利用 降低延迟 安全性（非设计作用，本身功能所附加出的） 采用虚拟局域网技术实现交换机以太网的广播隔离。 一个VLAN相当于OSI模型第2层的广播域，它能将广播控制在一个VLAN内部。 不同VLAN之间或VLAN与LAN/WAN的数据通信必须通过第3层（网络层）完成。 原理（划分方式） 物理层(physical layer) 以交换机端口作为划分VLAN的基础。 适合规模不大的组织。 数据链路层(data link layer) 以每台主机的MAC地址作为划分VLAN的基础。 实现方法： 创建一个MAC与VLAN映射的数据库。 当网络设备连接到端口后，交换机向VMPS(VLAN管理策略服务器)请求这个数据库。 找到相应的映射，完成VLAN的分配。 优点： 计算机物理位置的不同，也不影响VLAN的运作。 缺点： 人为建立MAC与VLAN的映射关系；因此导致管理复杂度增加。 网络层 以IP地址作为划分VLAN的基础；以子网视为VLAN设置的依据。【？？？】 优点： 网管人员已经将内部网段做好规划与分配后，将可大辐降低规划并设置VLANs架构的复杂度。 缺点： 交换机需要对帧进行处理（原本不需要），降低交换机接收和分派分组的效率。</description></item><item><title>网络协议 —— ARP</title><link>https://isshe.site/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-arp/</link><pubDate>Sun, 12 Dec 2021 11:35:47 -0400</pubDate><guid>https://isshe.site/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-arp/</guid><description>ARP协议 ARP（Address Resolution Protocol）：地址解析协议，是根据IP地址获取物理地址的一个TCP/IP协议。
工作过程 当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址解析成主机B的MAC地址(如果A/B不同网段，则A解析的应该是下一跳的MAC地址)，以下为工作流程：
第1步：主机A根据路由表内容，确定用于访问主机B的转发IP地址。主机A在本地ARP缓存中查找与主机B的IP匹配MAC地址。 第2步：如果主机A没有找到映射，则将ARP请求帧广播到本地网络上的所有主机。 收到请求的主机检查自己的IP是否匹配，不匹配就丢弃此ARP请求。 第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。 第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。 第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。 问题 什么是ARP欺骗？ 地址解析协议是建立在网络中各个主机可互相信任的基础上的，收到应答报文的主机，不会校验报文的真实性，就会加到ARP缓存中。 由此，攻击者可以向某一主机发送伪ARP应答报文，使此主机发送的信息无法到达预期的主机或者到达错误的主机，这就是ARP欺骗。</description></item><item><title>网络协议 —— DHCP</title><link>https://isshe.site/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-dhcp/</link><pubDate>Sun, 12 Dec 2021 11:35:47 -0400</pubDate><guid>https://isshe.site/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-dhcp/</guid><description>DHCP DHCP - 动态主机设置协议（Dynamic Host Configuration Protocol）。 DHCP是一个应用层协议。基于UDP。
作用 用于内网或网络服务供应商自动分配IP给用户。 作为内部管理员对所有计算机进行中央管理的手段。 历史 DHCP在1993年10月成为标准协议，它的前身是BOOTP协议。 BOOTP：BOOTP是一种网络协议，让电脑或其他周边仪器可以从服务器下载启动程序。 数据包类型 DHCP发现（DISCOVER）：client在物理子网上发送广播来寻找可用的服务器。 DHCP提供（OFFER）：当DHCP服务器收到一个来自客户的IP租约请求时，它会提供一个IP租约。 DHCP请求（REQUEST）：当客户PC收到一个IP租约提供时，它必须告诉所有其他的DHCP服务器它已经接受了一个租约提供。 DHCP确认（Acknowledge，ACK）：确认租约，包含租期和客户可能请求的其他所有配置信息。 DHCP释放(RELEASE)：客户端向DHCP服务器发送一个请求以释放DHCP资源，并注销其IP地址。 DHCP NAK：服务器回复客户，客户要求的网址不能被分配。 原理/流程 客户主机发送DHCP服务器发现(DISCOVER)广播包。 服务器收到DISCOVER包后，回复OFFER单播或广播包。【疑问？】 客户主机收到OFFER包后，发送REQUEST广播包。 服务器回复ACK单播或广播包。包含分配的IP及网关IP(next server IP)、租约等。 典型DHCP会话的模式
协议结构 +-------+--------+--------+--------+ |8 bits | 8 bits | 8 bits | 8 bits | +-------+--------+--------+--------+ | Op | Htype | Hlen | Hops | +-------+--------+--------+--------+ | Xid | +----------------------------------+ | Secs | Flags | +----------------+-----------------+ | Ciaddr | +----------------------------------+ | Yiaddr | +----------------------------------+ | Siaddr | +----------------------------------+ | Giaddr | +----------------------------------+ | Chaddr (16 bytes) | +----------------------------------+ | Sname (64 bytes) | +----------------------------------+ | File (128 bytes) | +----------------------------------+ | Option (variable) | +----------------------------------+ Op: 信息类型。如：客户端请求为1，服务器回复为2。 Htype：硬件类型。如：Ethernet(0x01) Hlen: 硬件地址长度。如：6。（MAC地址） Hops: 跳数。 Xid：传输ID。 Secs: 过去的时间。【疑问】 Flags：标记。 Ciaddr：客户端IP地址。（这里应该是续约的时候用的） Siaddr：下一个服务器IP地址。 Yiaddr：你的IP。（分配给客户机的IP） Giaddr：中继代理IP。【？？？】 Chaddr：客户机硬件地址。（Ethernet中就是Mac地址） Sname：服务器主机名称。 File：文件名。 Options：选项。详见rfc2132 1：子网掩码； 3：路由(网关)； 12：主机名 50：请求的IP地址 51：租约时间 53：DHCP消息类型。即上面的几种类型。 54：服务器标识。 疑问 DHCP服务器是否可以把一台主机拉黑？ 这个应该由DHCP软件提供。 服务器回复为什么是单播或广播包？ Flags中设置BROADCAST = 0时，则是单播；否则是广播。这是为了健壮性，同时兼容单播和多播。 Secs字段是哪一个时间段？ 从获取到IP地址或者续约过程开始到现在所消耗的时间。 Giaddr字段作用是什么？ giaddr: 中继代理地址。 中继代理相关详见：博客 相关 DHCP: RFC 2131 DHCP6: RFC 3315 DHCP wiki DHCP wiki中文 rfc2132</description></item><item><title>网络协议 —— DNS</title><link>https://isshe.site/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-dns/</link><pubDate>Sun, 12 Dec 2021 11:35:47 -0400</pubDate><guid>https://isshe.site/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-dns/</guid><description>DNS DNS - 域名系统（Domain Name System）。
是一个将域名和IP地址进行映射的分布式数据库。 DNS是应用层协议，使用TCP和UDP的53端口。 每一级域名长度的限制是63个字符，域名总长度不能超过253个字符。 作用 将对人友好的域名转换为对计算机友好的IP地址。 原理/过程 域名层级
主机名.次级域名.顶级域名.根域名 host.sld.tld.root www.isshe.xyz.root abc.isshe.xyz.root 分级查询：从根域名开始，依次查询每一级域名的NS记录。
从根域名服务器查询顶级域名服务器的NS记录和A记录； 根域名服务器是总所周知的，不用查。 从顶级域名服务器查询次级域名服务器的NS记录和A记录； 从次级域名服务器查询主机名的A记录； 分级查询示例：www.isshe.xyz
dig +trace www.isshe.xyz 进行查看
列出根域名服务器： . 227343 IN NS e.root-servers.net. . 227343 IN NS k.root-servers.net. . 227343 IN NS i.root-servers.net. . 227343 IN NS d.root-servers.net. . 227343 IN NS j.root-servers.net. . 227343 IN NS m.</description></item><item><title>网络协议 —— ICMP</title><link>https://isshe.site/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-icmp/</link><pubDate>Sun, 12 Dec 2021 11:24:32 -0400</pubDate><guid>https://isshe.site/p/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-icmp/</guid><description>ICMP ICMP - 互联网控制消息协议（Internet Control Message Protocol） ICMP是互联网协议族的核心协议之一。 IMCP用于发送控制消息，提供可能发生在通信环境中的各种问题反馈。 ICMP消息都是直接封装在一个IP数据包中的，因此，和UDP一样，ICMP是不可靠的。 原理及技术细节 每个路由器在转发数据报的时候都会把IP包头中的TTL值减1。 报文结构 ICMP报头从IP报头的第160位(20字节)开始：（有可选部分另算）
8bit 8bit 8bit 8bit +------+------+------+------+ | Type | Code | Checksum | +------+------+------+------+ | ID | Sequence | +------+------+------+------+ Type: ICMP报文类型。 Code：进一步划分ICMP的类型；该字段用来查找产生错误的原因。 例如，ICMP的目标不可达类型可以把这个位设为1至15等来表示不同的意思。 Checksum：校验和。 ID：ID/标识，在Echo Reply类型的消息中需要返回这个字段。 Sequence：序号，在Echo Reply类型的消息中需要返回这个字段。 报文类型 Type Code Status 描述 查询 差错 备注 0：Echo响应 0 Echo响应 ✓ ping中使用 1 未分配 ✓ 保留 2 未分配 ✓ 保留 3：目的不可达 0 目标网络不可达 ✓ 1 目标主机不可达 ✓ 2 目标协议不可达 ✓ 3 目标端口不可达 ✓ 4 要求分段并(但)设置DF标记 ✓ 5 源路由失败 ✓ 6 未知的目标网络 ✓ 7 未知的目标主机 ✓ 8 源主机隔离（作废不用） ✓ 9 禁止访问的网络 ✓ 10 禁止访问的主机 ✓ 11 对特定的TOS 网络不可达 ✓ 12 对特定的TOS 主机不可达 ✓ 13 由于过滤 网络流量被禁止 ✓ 14 主机越权 ✓ 15 优先权终止生效 ✓ 4：源端关闭 0 弃用 源端关闭（拥塞控制） ✓ 5：重定向 0 重定向网络 ✓ 1 重定向主机 ✓ 2 基于TOS的网络重定向 ✓ 3 基于TOS的主机重定向 ✓ 6 弃用 备用主机地址 7 未分配 保留 8 0 Echo请求 ✓ 9 0 路由通告 ✓ 10 0 路由器的发现/选择/请求 ✓ 11：超时 0 TTL超时 ✓ 1 分片重组超时 ✓ 12：参数问题-IP头部错误 0 IP报文首部参数错误 ✓ 1 丢失必要选项 ✓ 2 不支持的长度 13 0 时间戳请求 ✓ 14 0 时间戳应答 ✓ 15 0 信息请求 ✓ 16 0 信息应答 ✓ 17 0 地址掩码请求 ✓ 18 0 地址掩码应答 ✓ 19 保留 因安全原因保留 20~29 保留 保留用于稳健性实验 30~39 弃用 40 Photuris, Security failures ？？？ 41 用于实验性移动协议，如Seamoby[RFC4065] 42~255 保留 235 实验性 RFC3692 254 实验性 RFC3692 部分报文结构示例 3：目标不可达 目的地不可达由主机或其入站网关生成，以通知客户端由于某种原因目的地不可达。</description></item><item><title>安全 —— 使用 Snyk 及 Nessus 进行漏洞扫描</title><link>https://isshe.site/p/%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8-snyk-%E5%8F%8A-nessus-%E8%BF%9B%E8%A1%8C%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8-snyk-%E5%8F%8A-nessus-%E8%BF%9B%E8%A1%8C%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/</guid><description>漏洞扫描 本文主要介绍如何使用 nessus 进行主机扫描以及使用 snyk 进行 Docker 镜像扫描。
1. 主机扫描 1.1 安装 nessus 注意：需要空间 20 GB。
打开 nessus 官网
注册：
进入 nessus 下载页 下载：
安装
rpm -i Nessus-8.15.1-es7.x86_64.rpm 启动
/bin/systemctl start nessusd.service 进入管理界面: https://10.0.0.199:8834/
设置账号密码
初始化及编译插件
1.2 使用 nessus 添加 scan</description></item><item><title>设计模式 —— 代理模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid><description>代理模式 目标： 初接触此模式时，熟悉最常用的使用方式。 有更深的理解后，再研究其他使用方法。 1. 基础概念 定义/意图：为某个对象提供一种代理，以控制对这个对象的访问。
控制对象的访问；只有需要时才创建、初始化。 别名：Proxy，Surrogate[ˈsɜ:rəgət]
类图： 类图
可能的对象图 对象图
出场嘉宾
Subject: 定义RealSubject和Proxy的共用接口。使得可以在任何使用RealSubject的地方使用Proxy。 Proxy: 代理。继承自Subject。 保存RealSubject的引用。 提供与RealSubject相同的接口，以代替RealSubject。 控制对RealSubject的存取/访问，并可能负责创建、删除。 针对类型的功能： 远程代理：负责对请求及参数进行编码，编发送给不同地址空间的实体。 虚拟代理：可缓存真实对象的附加信息，以延迟对真实对象的访问/创建。如，图片代理缓存图片的大小，尺寸。 保护代理：检查调用者的权限，保护真实对象。 RealSubject: 真实的对象，被Proxy代表的实体。 Client: 使用Subject。 协作/工作流程</description></item><item><title>设计模式 —— 单件模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BB%B6%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BB%B6%E6%A8%A1%E5%BC%8F/</guid><description>单件模式——独一无二的对象 初看起来好像很简单，实际接触后，发现并不是这么一回事。先给自己几个问题：
创建对象的时候，如何知道现在只有一个？ 如何保证创建对象时候的原子性？（不能保证就有可能创建多于1个的对象） 如何获取/访问这个唯一对象？ 1. 基础概念 定义/意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。 原理：让类自身保存它的唯一实例，并提供一个访问该实例的方法。实例的唯一性由类来保证。 类图： 类图 出场嘉宾 Singleton：单件类。 定义一个接口，允许客户访问唯一实例。此接口是一个类操作。 负责创建唯一实例。 2. 解决什么问题？如何解决？ 系统中，有些东西只需要一份就够了，因此要保证只有一份。 解决方法：只允许创建一个。但如何保证只有一个呢，见其他部分。 3. 优缺点是什么？ 3.1 优点 对唯一实例的创建是受控的——不允许直接创建（new或变量）。 对唯一实例的访问是受控的。 缩小命名空间。 此模式是对全局变量的一种改进。 避免了存储唯一实例的全局变量污染命名空间。 （同一命名空间内，两个名字相同，就会冲突。） 允许对操作和表示的精化。【？！】 单件类可以有子类。 可以使用所需的拓展类在运行时配置应用。 允许可变的数目的实例。 比类操作更灵活。 如果使用类操作（C++的静态成员函数、Smalltalk的类方法）的方式来封装单件功能，会使得改变设计以允许多个实例变得困难。 惰性(lazy)初始化，惰性创建——不需要的时候，不会创建。 3.2 缺点 4. 使用场景是什么？ 多个模块共用的全局数据库/配置。 5.</description></item><item><title>设计模式 —— 外观模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</guid><description>外观模式——让接口更简单 外观模式：Facade /fəˈsɑːd/
目标： 初接触此模式时，熟悉最常用的使用方式。 有更深的理解后，再研究其他使用方法。 1. 基础概念 定义/意图：让接口更简单 为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 使用外观模式 别名： 类图/结构： 类图 出场嘉宾 Facade：外观 知道哪些子系统负责处理哪些请求； 将客户请求代理给适当的子系统； Subsystem Classes：其他子系统类 实现子系统的功能； 处理由Facede指派的任务； 没有Facade的任何信息； 协作/工作流程 客户 -&amp;gt; Facade -&amp;gt; Subsystem 客户发送请求给Facede； Facede将请求适当转发到子系统； 子系统完成请求工作，返回请求结果给Facede； Facede返回请求结果给客户； 2. 解决什么问题？如何解决？ 降低系统间的通信和相互依赖关系。 3. 优缺点是什么？ 3.1 优点 对客户屏蔽子系统组件，减少客户处理得对象数目并使得子系统使用更方便。 实现了子系统和客户之间的松耦合关系。 Facade模式有助于建立层次 结构系统。 如应用需要，可以不限制它们使用子系统类。 3.</description></item><item><title>设计模式 —— 工厂方法模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid><description>工厂方法 工厂方法模式(Factory Method Pattern)又称为：
工厂模式； 虚拟构造器(Virtual Constructor)模式 多态工厂(Polymorphic Factory)模式 它属于类创建型模式。 1. 基础概念 定义/意图：
定义一个创建对象的接口，让子类决定实例化哪一个类。 工厂方法使一个类的实例化延迟到其子类。 框架使用抽象类定义和维护对象之间的关系。 类图： 类图
出场嘉宾
产品/Product: 定义产品。 具体产品/Concrete Product: 定义具体的产品，继承自产品。 创建者/Creator：工厂；工厂的抽象类，声明工厂方法。 创建者可以定义一个默认的缺省实现，返回一个缺省的具体产品。 具体创建者/Concrete Creator: 具体工厂；继承自工厂，用于创建具体产品。 2. 解决什么问题？如何解决？ 3. 优缺点是什么？ 3.1 优点 【简单工厂的优点】 将创建对象的代码集中在一个对象或一个方法中，避免重复代码。 实例化对象时，依赖接口，不依赖具体类。【？！】 添加新产品时，不需修改旧代码，只需添加新的具体产品和具体创建者。 3.2 缺点 必须创建创建者的子类，无论用户想创建的具体产品是一个还是多个。（成对添加） 4. 使用场景是什么？ 当一个类不知道它所创建的对象的类的时候。 当一个类希望由它的子类来指定所创建的对象的时候。 当类将创建对象的职责委托给一个或多个子类，并且将这些子类(代理者)是代理者这一信息局部化的时候。 5.</description></item><item><title>设计模式 —— 抽象工厂模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid><description>设计模式Readme模板 1. 基础概念 定义：提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。
类图： 类图
出场嘉宾
AbstractFactory: 抽象工厂；声明具体工厂的接口——声明了一个创建抽象产品对象的接口。 ConcreteFactory: 具体工厂；继承自抽象工厂，实现了创建具体产品对象的操作。 AbstractProduct: 抽象产品；声明具体产品的接口——声明了一类产品对象的接口。 ConcreteProduct: 具体产品；继承自抽象产品，定义了一个将被具体工厂创建的产品对象，实现了抽象产品的接口， Client: 仅使用由抽象工厂和抽象产品类声明的接口——不使用具体工厂、具体产品的接口/方法。 工作方式：
运行时创建具体工厂对象，具体工厂对象创建具体产品对象。 客户使用不同的具体工厂对象，创建不同的具体产品对象。 抽象工厂将产品对象的创建延迟到具体工厂。 2. 解决什么问题？如何解决？ 需联合使用一系列产品的时候，可使用此模式 其他见【4.使用场景】 3. 优缺点是什么？ 3.1 优点 分离了具体的类： 工厂封装创建产品对象的过程，将客户和类的实现分离。客户通过抽象接口操纵实例。 具体产品的类名也在具体工厂的实现中被分离，它们不会出现在客户代码中。 易于交换产品系列： 一个具体工厂类在一个应用中仅出现一次——它初始化的时候； 改变具体工厂类即可改变产品配置——具体工厂类A换为具体工厂类B,则产品配置从A也更换到B。 有利于产品的一致性：【？？？】 一个系列的产品对象被设计成一起工作的时候，一个应用一次只能使用同一个系列中的对象。【？？？】 3.2 缺点 难以添加新种类的产品，需改代码。（拓展性受到限制） 抽象工厂类确定了可以被创建的产品集合，要新增就要修改此类——它及它的子类都要变化。 4.</description></item><item><title>设计模式 —— 模板方法模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid><description>模板方法模式——用继承改变算法 目标： 初接触此模式时，熟悉最常用的使用方式。 有更深的理解后，再研究其他使用方法。 1. 基础概念 定义/意图：定义一个操作的算法的骨架，将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 别名：无 类图： 类图 出场嘉宾 AbstrackClass：抽象类 定义抽象的原语操作(primitive operation)，各个步骤的具体实现交给子类。 实现一个模板方法，定义一个算法的步骤。 实现不变的部分。 ConcreteClass：具体类 实现原语操作，完成特定步骤的具体实现。 实现变动的部分。 协作/工作流程 AbstrackClass实现不变的部分（或骨架）； ConcreteClass实现变动的部分； AbstrackClass 和 ConcreteClass 实现整个操作/算法。 效果 模板方法是一种代码复用的基本技术。在类库中尤为重要。 模板方法导致一种反向的控制结构——&amp;ldquo;好莱坞原则&amp;rdquo;——即&amp;quot;别找我们，我们会找你&amp;quot;——父类调用子类的操作。 模板方法可能调用下列类型的操作： 具体的操作：ConcreteClass或对客户类的操作。 具体的AbstractClass的操作：即通常对子类有用的操作。 原语操作：即抽象操作 工厂方法 钩子操作(hook operation)：提供缺省的行为，子类可在必要时进行扩展。 2. 优缺点是什么？ 2.1 优点 提供更好的扩展性； 减少重复代码。 2.</description></item><item><title>设计模式 —— 状态模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</guid><description>状态(State)模式 目标： 初接触此模式时，熟悉最常用的使用方式。 有更深的理解后，再研究其他使用方法。 1. 基础概念 定义/意图：允许一个对象再起内部状态改变时改变它的行为。对象看起来似乎修改了它的类。 别名：状态对象(Objects for States) 类图： 类图 出场嘉宾 Context: 上下文、环境 定义客户感兴趣的接口。 维护一个ConcreteState子类的实例，表示当前状态。 State：状态，抽象类/接口 定义一个接口，以封装与Context的特定状态相关的行为。 ConcreteState：具体状态 定义一个具体的状态，实现一个与Context的一个状态的相关的行为。 协作/工作流程 Context保存一个ConcreteState对象，表示当前状态。 Context将与状态相关的请求委托给当前的ConcreteState对象处理。 Context可将自身作为一个参数传递给处理请求的状态对象。 Context是客户使用的主要接口。 Context和ConcreteState都可以决定哪一个状态是后继状态。 2. 优缺点是什么？ 2.1 优点 状态模式将特定状态相关的行为局部化，并且将不同状态的行为分割开。 状态模式使得状态转换显式化。【？？？】 为不同的状态引入独立的对象使得转换变得更加明确。 状态对象可被共享：可被多个Context共享。 2.2 缺点 增加了对象的数目。 C++里面容易导致头文件循环引用。解决方法，见C++示例的TCPState.h文件 3.</description></item><item><title>设计模式 —— 策略模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid><description>策略模式——用委托改变算法 目标： 初接触此模式时，熟悉最常用的使用方式。 有更深的理解后，再研究其他使用方法。 1. 基础概念 定义/意图： 定义一系列算法，把它们一个个封装起来，并使它们可以相互替换。 本模式使得算法可以独立于使用它的客户而变化。 别名：Policy（政策） 类图： 类图 出场嘉宾 Strategy：策略，定义算法的公共接口。 Context使用这个接口来调用某个ConcreteStrategy定义的算法。 ConcreteStrategy：具体策略，实现具体的算法。 Context：上下文 用已成而ConcreteStrategy对象来配置；【？？？】 维护一个对Strategy对象的引用； 可定义一个接口来让Strategy访问它的数据。 协作/工作流程 Strategy和Context相互作用，以实现选定的算法。 Context将算法需要的参数传给Strategy，或 Context将自己作为参数传给Strategy。 Context将它的客户的请求转发给它的Strategy。 客户通常创建并传递一个ConcreteStrategy对象给该Context（客户仅与Context交互）。 客户通常可以选择一系列的ConcreteStrategy。 2. 优缺点是什么？ 2.1 优点 Strategy类层次为Context定义了一系列可供重用的算法/行为。 提供一个代替继承的方法。 继承提供了另一种支持多种算法/行为的方法——直接生成Context的子类，但提供不同的行为。 消除了一些条件语句（客户进行指定，不需要switch和if） 可提供相同行为的不同实现。 2.</description></item><item><title>设计模式 —— 简单工厂模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid><description>简单工厂模式 别称：静态工厂方法 简单工厂并不是一种模式，而是一种编程习惯。——《Head First设计模式》 代码比较简单，就不写代码的Readme了 1. 基础概念 定义/意图：无 类图： 类图 出场嘉宾 产品/Product：产品，抽象类（或接口） 具体产品/Concrete Product：具体产品，继承/实现Product 工厂/Creator：工厂，用于生产Product 2. 解决什么问题？如何解决？ 无
3. 优缺点是什么？ 3.1 优点 把变化集中到一块，易于管理。 &amp;ldquo;消费对象&amp;quot;不需要直接创建具体产品(Concrete Product)，把对象创建和使用分开。 3.2 缺点 工厂类集中了多个其他类，违反了高内聚责任分配原则。【？！】 有新的具体产品时，需要修改代码，不符合开闭原则。 随着具体产品增加，判断添加回变多，维护回变难。 这些缺点在工厂方法模式中得到解决。
4. 使用场景是什么？ 工厂类负责创建的对象固定、较小。（变动不频繁） 对创建对象的逻辑不关心。 5. 注意 由于简单工厂模式容易违反高内聚责任分配原则，因此一般只在较简单的情况下应用。 6. 应用实例？ 无 x. 疑问 y. 拓展 工厂方法模式 抽象工厂模式 z.</description></item><item><title>设计模式 —— 组合模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid><description>组合模式 目标： 初接触此模式时，熟悉最常用的使用方式。 有更深的理解后，再研究其他使用方法。 1. 基础概念 定义/意图：将对象组合成树形结构以表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。 别名：Composite 类图1： 类图 类图2： 类图 典型对象图： 对象图 出场嘉宾 Component: 组合 为组合中的对象声明接口。 在适当情况下，实现公共接口的缺省行为。 声明一个接口用于访问和管理Component组件。 Leaf: 叶节点，叶子部件 在组合中表示叶节点对象，叶节点没有子节点。 定义节点对象的具体的行为。 Composite: 组合部件，有孩子的部件。 定义有孩子节点的节点的行为。 存储孩子节点。 在Component接口中实现与子节点有关的操作。 Client： 通过Component接口操纵组合部件的对象。 协作/工作流程 Client使用Component接口与组合结构中的对象(Composite/Leaf)进行交互。 如果接收者是叶节点，则直接处理请求。 如果接收者是Composite，通常转发请求给它的子部件，在转发之前或之后，可能执行一些辅助操作。 2. 优缺点是什么？ 2.1 优点 定义包含基本对象和组合对象的类层次结构。 基本对象可以被组合成更复杂的组合对象 组合对象可以被再组合。 简化客户代码。 客户可以统一地使用基本对象和组合对象。 更容易增加新类型的组件。 2.</description></item><item><title>设计模式 —— 装饰者模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>装饰者模式——不改变接口，但加入责任 1. 基础概念 定义：动态地给一个对象添加一些额外的职责。
注意是针对对象而不是类 类图： 类图
出场嘉宾：
[基础]组件(Conponent): 被装饰者，定义一个对象接口（Java：接口，C++：抽象类）； 具体[基础]组件(Concrete Conponent): 定义一个具体的基础组件对象，可以给这个对象添加一些职责（装饰该对象）。 装饰者(Decorator): 维持一个指向组件对象的指针，并定义一个与组件接口一致的接口。(指针是为了知道所修饰的是什么) 具体装饰者(Concrete Decorator): 可以向具体组件添加职责（修饰）。 2. 解决什么问题？如何解决？ 解决用继承给对象添加功能不够灵活的问题。 通常拓展一个类都是用继承的方法，这是静态拓展，随着拓展增多，子类会膨胀。 解决方法：具体组件和修饰者都继承自公共的类，使一个对象能装饰另一个对象。 3. 优缺点是什么？ 3.1 优点 拓展功能时，提供比继承更有弹性的解决方案。（可增加、删除职责） 比静态继承更灵活。 可通过动态的方式在运行时选择不同的具体装饰类，实现不同的行为。 可以对一个对象进行多次修饰（甚至多次相同的修饰）。 符合开闭原则，具体组件和具体修饰者可以独立变化，用户根据需要添加组件或装饰者，原代码不需修改。 装饰者可以在所委托的装饰者行为之前或之后加上自己的行为，以达到特定的目的 3.2 缺点 可能有许多小对象，排错难度加大、代码阅读难度加大。 可能不同的东西，继承自一个公共类。（个人理解） 4. 使用场景是什么？ 在不影响其他对象的情况下，已动态、透明的方式给单个对象添加职责。 处理那些可以撤销的职责。 怎么实现撤销？？？ 当不能使用子类/继承的方法进行扩充时。 情况一：类定义被隐藏，因此无法用于生成子类。 情况二：有大量独立的扩展，为支持每一种组合将产生大量子类。（使子类书目爆炸性增长） 5.</description></item><item><title>设计模式 —— 观察者模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>观察者模式 1. 基础概念 定义：定义了对象之间的一对多依赖，这样依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。 类图： 类图 出场嘉宾 主题(Subject)：出版者、被观察者、 观察者(Observer)：订阅者、 具体主题(Concrete Subject): 对主题的实现 具体观察者(Concrete Observer): 对观察者的实现 观察者模式就和报纸订阅/取消订阅、邮件订阅/取消订阅类似。 出版者（主题）+ 订阅者（观察者）=观察者模式
2. 解决什么问题？如何解决？ （易用、低耦合、高度协作）解决一个对象状态改变通知其他多个对象的问题。 3. 优缺点是什么？ 3.1 优点 支持一对多通信。 符合开闭原则。【疑问？？？】 在主题和观察者之间建立一个抽象的耦合。【抽象的耦合？？？】 3.2 缺点 当一个主题的观察者过多时，通知会比较耗费时间。 当 主题 和 观察者有循环依赖时，会导致循环调用。 观察者无法知道变化过程，只能知道变化结果。 4. 使用场景是什么？ 一个对象要通知其他[多个]对象自己改变时（可能并不知道这些对象是谁）； 一个对象要导致其他[多个]对象自己改变时； 需要创建触发链时； 5. 应用实例？ 天气预报服务器数据更新，客户端实时展示更新后的数据。（《Head First设计模式》示例） 电子商务网站向多个用户推送商品信息。 x. 疑问 观察者如何对感兴趣的事情进行订阅、取消订阅？ 主题提供注册接口，以供观察者对主题进行订阅； 主题提供取消订阅接口，以供观察者对主题进行取消订阅； 主题如何存储观察者？ 可存储在数组或其他数据结构中。 主题如何通知观察者？ 遍历所有观察者，一个一个进行通知。 mqtt是否也是观察者模式的一种实现？ 怎么理解开闭原则，在本模式中，哪部分符合开闭原则？ 开闭原则是针对类来说的。 y.</description></item><item><title>设计模式 —— 迭代器模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid><description>迭代器模式——提供不暴露聚合对象内部表示的访问聚合对象各个元素的方法 目标： 初接触此模式时，熟悉最常用的使用方式。 有更深的理解后，再研究其他使用方法。 1. 基础概念 定义/意图：提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露改对象的内部表示。 别名：游标（Cursor） 分类：对象行为型模式 类图： 类图 出场嘉宾 Iterator: 迭代器 定义访问和遍历元素的接口。 ConcreteIterator: 具体迭代器 实现对具体聚合对象的迭代器接口。 对聚合对象遍历时，跟踪当前位置。 Aggregate：聚合 定义创建相应迭代器对象的接口。 ConcreteAggregate：具体聚合 实现创建相应迭代器的接口 返回ConcreteIterator的一个适当实例。 协作/工作流程 通过 ConcreteAggregate 创建 ConcreteIterator； 通过 ConcreteIterator 访问/遍历 ConcreteAggregate。 2. 优缺点是什么？ 2.1 优点 支持以不同的方式遍历一个聚合。 复杂的聚合可用多种方式进行遍历。 迭代器简化了聚合的接口。 用了迭代器的遍历接口，聚合就不需要提供遍历接口，于是就简化了聚合的接口。 同一个聚合上可以有多个聚合。 每个迭代器保持自己的遍历状态，因此可以同时进行多个遍历。 2.</description></item><item><title>设计模式 —— 适配器模式</title><link>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 12 Dec 2021 07:15:30 -0400</pubDate><guid>https://isshe.site/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid><description>适配器模式——将一个接口转换成另一个接口 目标： 初接触此模式时，熟悉最常用的使用方式。如，对象适配器。 有更深的理解后，再研究其他使用方法。如，类适配器和双向适配器 1. 基础概念 定义/意图： 将一个类的接口转换成另一个接口。适配器(Adapter)模式使得原来接口不兼容的类可以一起工作。 把一个东西，伪装成另一个东西！ 别名：包装器（Wrapper） 类图1：类适配器类图（使用多重继承对一个接口与另一个接口进行匹配） 类图 类图2：对象适配器类图 类图 出场嘉宾 Target: 定义Client使用的与特定领域相关的接口。 Client：与符合Target接口的对象协同。 Adaptee：已存在的接口，被适配者。 Adapter：对Adaptee接口与Target接口进行适配，适配器。 协作/工作流程 Client在Adapter实例上调用一些操作。 Adapter调用Adaptee的操作，以实现用户请求。 2. 解决什么问题？如何解决？ 在不改变原有Target和Adaptee代码情况下，对Adaptee用Target的方式访问。 解决方法：在两者之间添加一个中间层——Adapter。 3. 优缺点是什么？ 3.1 类适配器的优点 不需要重新实现整个被适配者类只实现部分，因为Adapter是Adaptee的子类。 仅引入了一个对象，不需要额外的指针间接得到adaptee。 3.2 类适配器的缺点 只能适配某个特定的类，不能适配其子类。【疑惑？！】 3.3 对象适配器的优点 更有弹性，使用组合（引用另一个类或其子类），支持适配某个类及其子类。 3.4 对象适配器的缺点 重定义(新增)Adaptee子类的行为变得比较困难。解决方法：直接引用子类对象。 4.</description></item></channel></rss>