<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lua on 树深时间录</title><link>https://isshe.site/categories/lua/</link><description>Recent content in Lua on 树深时间录</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Jan 2022 12:45:13 -0400</lastBuildDate><atom:link href="https://isshe.site/categories/lua/index.xml" rel="self" type="application/rss+xml"/><item><title>Lua —— 重载全局函数 require</title><link>https://isshe.site/p/lua-%E9%87%8D%E8%BD%BD%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0-require/</link><pubDate>Sun, 23 Jan 2022 12:45:13 -0400</pubDate><guid>https://isshe.site/p/lua-%E9%87%8D%E8%BD%BD%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0-require/</guid><description>全局函数重载 在我个人的开源项目 xway 的中有一个需求是：允许用户写 Lua 来自定义一些模块，提供最大的灵活性，但是不想把 Lua 模块保存成文件。这时候我们要怎么做呢？怎么才能从内存中 require 一个模块呢？答案是重载 require 函数。 利用 Lua 的环境（Environment）特性，在某个独立的环境中重载 require 函数。同时独立的环境也允许我们进行一些限制，例如每个用户只能访问自己的资源。不过，xway 项目计划是不支持多租户，所以限制相关的实现，还未进行探索验证。
下面直接通过一个例子来说明。
示例 local ctype_count = require &amp;#34;ctype.count&amp;#34; local ma = [[ local _M = {} function _M.hello() print(&amp;#34;a hello&amp;#34;) end return _M ]] local mb = [[ local ma = require(&amp;#34;ma&amp;#34;) local _M = {} function _M.hello() ma.hello() print(&amp;#34;b hello&amp;#34;) end return _M ]] local module_map = { [&amp;#34;ma&amp;#34;] = ma, [&amp;#34;mb&amp;#34;] = mb, } local function new_require(name) return loadstring(module_map[name])() end local new_env ={ require = new_require, } setmetatable(new_env, {__index = _G}) local m1 = loadstring(mb) setfenv(m1, new_env) print(ctype_count()) local ret, mod = pcall(m1) if not ret then print(ret) end print(ctype_count()) mod.</description></item></channel></rss>